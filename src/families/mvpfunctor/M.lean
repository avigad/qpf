/-
Copyright (c) 2018 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Jeremy Avigad, Mario Carneiro

The M construction as a multivariate polynomial functor.
-/
import families.mvpfunctor.basic families.pfunctor
universe u

namespace mvpfunctor

variables {I J : Type u} (P : mvpfunctor (I ‚äï J) J)

inductive M_path : Œ† {i : J}, pfunctor.M P.last i ‚Üí I ‚Üí Type u
| root {i} (x : pfunctor.M P.last i) (a : P.A i) (f : P.last.B i a ‚ü∂ P.last.M) (h : pfunctor.M_dest x = ‚ü®a, f‚ü©)
       (j : I) (c : P.drop.B i a j) :
    M_path x j
| child {i} (x : pfunctor.M P.last i) (a : P.A i) (f : P.last.B i a ‚ü∂ P.last.M)
        (h : pfunctor.M_dest x = ‚ü®a, f‚ü©)
        (j : J) (a : P.last.B i a j) {i'} (c : M_path (f a) i') :
    M_path x i'

def Mp : mvpfunctor I J :=
{ A := P.last.M, B := Œª _, P.M_path }

def M (Œ± : fam I) : fam J := P.Mp.obj Œ±

-- instance mvfunctor_M : mvfunctor P.M := by delta M; apply_instance

def M_corec_shape {Œ≤ : fam J}
    (g‚ÇÄ : Œ≤ ‚ü∂ P.A)
    (g‚ÇÇ : Œ† {i} (b : Œ≤ i), P.last.B i (g‚ÇÄ b) ‚ü∂ Œ≤) :
  Œ≤ ‚ü∂ pfunctor.M P.last :=
pfunctor.M_corec (Œª j b, ‚ü®g‚ÇÄ b, g‚ÇÇ _‚ü©)

def cast_dropB {i} : Œ† {a a' : P.A i} (h : a = a'), P.drop.B i a ‚ü∂ P.drop.B i a'
| _ _ rfl i b := b

def cast_lastB {i} : Œ† {a a' : P.A i} (h : a = a'), P.last.B i a ‚ü∂ P.last.B i a'
| _ _ rfl i b := b

def M_corec_contents {Œ± : fam I} {Œ≤ : fam J}
    (g‚ÇÄ : Œ≤ ‚ü∂ P.A)
    (g‚ÇÅ : Œ† ‚¶Éi‚¶Ñ (b : Œ≤ i), P.drop.B i (g‚ÇÄ b) ‚ü∂ Œ±)
    (g‚ÇÇ : Œ† ‚¶Éi‚¶Ñ (b : Œ≤ i), P.last.B i (g‚ÇÄ b) ‚ü∂ Œ≤) :
  Œ† {j} x (b : Œ≤ j), x = P.M_corec_shape g‚ÇÄ g‚ÇÇ b ‚Üí (P.M_path x ‚ü∂ Œ±)
| j ._ b h ._ (M_path.root x a f h' i c)    :=
  have a = g‚ÇÄ b,
    by { rw [h, M_corec_shape, pfunctor.M_dest_corec] at h', cases h', refl },
  g‚ÇÅ b (P.cast_dropB this c)
| j ._ b h ._ (M_path.child x a f h' j' i c) :=
  have h‚ÇÄ : a = g‚ÇÄ b,
    by { rw [h, M_corec_shape, pfunctor.M_dest_corec] at h', cases h', refl },
  have h‚ÇÅ : f i = M_corec_shape P g‚ÇÄ g‚ÇÇ (g‚ÇÇ b (cast_lastB P h‚ÇÄ i)),
    by { rw [h, M_corec_shape, pfunctor.M_dest_corec] at h', cases h', refl },
  M_corec_contents (f i) (g‚ÇÇ b (P.cast_lastB h‚ÇÄ _)) h‚ÇÅ c

def M_corec' {Œ± : fam I} {Œ≤ : fam J}
    (g‚ÇÄ : Œ≤ ‚ü∂ P.A)
    (g‚ÇÅ : Œ† ‚¶Éi‚¶Ñ (b : Œ≤ i), P.drop.B i (g‚ÇÄ b) ‚ü∂ Œ±) :
  Œ† (g‚ÇÇ : Œ† ‚¶Éi‚¶Ñ (b : Œ≤ i), P.last.B i (g‚ÇÄ b) ‚ü∂ Œ≤),
  Œ≤ ‚ü∂ P.M Œ±
| g‚ÇÇ j b := ‚ü®M_corec_shape P g‚ÇÄ g‚ÇÇ b, M_corec_contents P g‚ÇÄ g‚ÇÅ g‚ÇÇ _ _ rfl‚ü©

open fam

def M_corec {Œ± : fam I} {Œ≤ : fam J} (g : Œ≤ ‚ü∂ P.obj (Œ±.append1 Œ≤)) :
  Œ≤ ‚ü∂ P.M Œ± :=
M_corec' P
  (Œª i b, (g b).fst)
  (Œª i b, drop_fun (g b).snd)
  (Œª i b, last_fun (g b).snd)

def M_path_dest_left {Œ± : fam I} {j} {x : pfunctor.M P.last j}
    {a : P.A j} {f : P.last.B j a ‚ü∂ P.last.M} (h : pfunctor.M_dest x = ‚ü®a, f‚ü©)
    (f' : P.M_path x ‚ü∂ Œ±) :
  P.drop.B j a ‚ü∂ Œ± :=
Œª i c, f' (M_path.root x a f h i c)

def M_path_dest_right {Œ± : fam I} {j} {x : pfunctor.M P.last j}
    {a : P.A j} {f : P.last.B j a ‚ü∂ P.last.M} (h : pfunctor.M_dest x = ‚ü®a, f‚ü©)
    (f' : P.M_path x ‚ü∂ Œ±) :
  Œ† {i} j : P.last.B _ a i, P.M_path (f j) ‚ü∂ Œ± :=
Œª j i k c, f' (M_path.child x a f h j i c)

def M_dest' {Œ± : fam I}
    {i} {x : pfunctor.M P.last i} {a : P.A i}
    {f : P.last.B i a ‚ü∂ P.last.M} (h : pfunctor.M_dest x = ‚ü®a, f‚ü©)
    (f' : P.M_path x ‚ü∂ Œ±) :
  P.obj (Œ±.append1 (P.M Œ±)) _ :=
‚ü®a, split_fun (P.M_path_dest_left h f') (Œª j x, ‚ü®f x, P.M_path_dest_right h f' x‚ü©)‚ü©

def M_dest : Œ† {Œ± : fam I}, P.M Œ± ‚ü∂ P.obj (Œ±.append1 (P.M Œ±))
| Œ± i x := P.M_dest' (sigma.eta $ pfunctor.M_dest x.fst).symm x.snd

def M_mk : Œ† {Œ± : fam I}, P.obj (Œ±.append1 (P.M Œ±)) ‚ü∂ P.M Œ±
| Œ± := M_corec _ (P.map $ append_fun (ùüô _) $ M_dest P)

theorem M_dest'_eq_dest' {Œ± : fam I} {i} {x : pfunctor.M P.last i}
    {a‚ÇÅ : P.A i} {f‚ÇÅ : P.last.B _ a‚ÇÅ ‚ü∂ P.last.M} (h‚ÇÅ : pfunctor.M_dest x = ‚ü®a‚ÇÅ, f‚ÇÅ‚ü©)
    {a‚ÇÇ : P.A i} {f‚ÇÇ : P.last.B _ a‚ÇÇ ‚ü∂ P.last.M} (h‚ÇÇ : pfunctor.M_dest x = ‚ü®a‚ÇÇ, f‚ÇÇ‚ü©)
    (f' : P.M_path x ‚ü∂ Œ±) : M_dest' P h‚ÇÅ f' = M_dest' P h‚ÇÇ f' :=
by cases h‚ÇÅ.symm.trans h‚ÇÇ; refl

theorem M_dest_eq_dest' {Œ± : fam I} {i} {x : pfunctor.M P.last i}
    {a : P.A i} {f : P.last.B i a ‚ü∂ P.last.M} (h : pfunctor.M_dest x = ‚ü®a, f‚ü©)
    (f' : P.M_path x ‚ü∂ Œ±) : M_dest P ‚ü®x, f'‚ü© = M_dest' P h f' :=
M_dest'_eq_dest' _ _ _ _

theorem M_dest_corec' {Œ± : fam I} {Œ≤ : fam J}
    (g‚ÇÄ : Œ≤ ‚ü∂ P.A)
    (g‚ÇÅ : Œ† ‚¶Éi‚¶Ñ (b : Œ≤ i), P.drop.B i (g‚ÇÄ b) ‚ü∂ Œ±)
    (g‚ÇÇ : Œ† ‚¶Éi‚¶Ñ (b : Œ≤ i), P.last.B i (g‚ÇÄ b) ‚ü∂ Œ≤)
    {i} (x : Œ≤ i) :
  P.M_dest (P.M_corec' g‚ÇÄ g‚ÇÅ g‚ÇÇ x) =
    ‚ü®g‚ÇÄ x, split_fun (g‚ÇÅ x) (g‚ÇÇ x ‚â´ P.M_corec' g‚ÇÄ g‚ÇÅ g‚ÇÇ)‚ü© :=
rfl

theorem M_dest_corec {Œ± : fam I} {Œ≤ : fam J}
  (g : Œ≤ ‚ü∂ P.obj (Œ±.append1 Œ≤)) {i} (x : Œ≤ i) :
  P.M_dest (P.M_corec g x) = P.map (append_fun (ùüô _) (P.M_corec g)) (g x) :=
begin
  transitivity, apply M_dest_corec',
  cases g x with a f, dsimp,
  rw pfunctor.map_eq', congr,
  conv { to_rhs, rw [‚Üêsplit_drop_fun_last_fun f, mvfunctor.append_fun_comp_split_fun] },
  refl
end

@[reassoc]
theorem M_dest_corec'' {Œ± : fam I} {Œ≤ : fam J}
  (g : Œ≤ ‚ü∂ P.obj (Œ±.append1 Œ≤)) :
  P.M_corec g ‚â´ P.M_dest = g ‚â´ P.map (append_fun (ùüô _) (P.M_corec g)) :=
by ext : 2; simp [M_dest_corec]

lemma M_bisim_lemma {Œ± : fam I}
  {i} {a‚ÇÅ : (Mp P).A i} {f‚ÇÅ : (Mp P).B _ a‚ÇÅ ‚ü∂ Œ±}
  {a' : P.A i} {f' : (P.B _ a').drop ‚ü∂ Œ±} {f‚ÇÅ' : (P.B _ a').last ‚ü∂ M P Œ±}
  (e‚ÇÅ : M_dest P ‚ü®a‚ÇÅ, f‚ÇÅ‚ü© = ‚ü®a', split_fun f' f‚ÇÅ'‚ü©) :
  ‚àÉ g‚ÇÅ' (e‚ÇÅ' : pfunctor.M_dest a‚ÇÅ = ‚ü®a', g‚ÇÅ'‚ü©),
    f' = M_path_dest_left P e‚ÇÅ' f‚ÇÅ ‚àß
    f‚ÇÅ' = Œª i (x : (last P).B _ a' _),
      ‚ü®g‚ÇÅ' x, M_path_dest_right P e‚ÇÅ' f‚ÇÅ x‚ü© :=
begin
  generalize_hyp ef : @split_fun _ _ _ (append1 Œ± (M P Œ±)) f' f‚ÇÅ' = ff at e‚ÇÅ,
  cases e‚ÇÅ' : pfunctor.M_dest a‚ÇÅ with a‚ÇÅ' g‚ÇÅ',
  rw M_dest_eq_dest' _ e‚ÇÅ' at e‚ÇÅ,
  cases e‚ÇÅ, exact ‚ü®_, e‚ÇÅ', mvfunctor.split_fun_inj ef‚ü©,
end

theorem M_bisim {Œ± : fam I} (R : Œ† ‚¶Éj‚¶Ñ, P.M Œ± j ‚Üí P.M Œ± j ‚Üí Prop)
  (h : ‚àÄ j (x y : P.M Œ± j), R x y ‚Üí ‚àÉ a f f‚ÇÅ f‚ÇÇ,
    P.M_dest x = ‚ü®a, split_fun f f‚ÇÅ‚ü© ‚àß
    P.M_dest y = ‚ü®a, split_fun f f‚ÇÇ‚ü© ‚àß
    ‚àÄ i x, @R i (f‚ÇÅ x) (f‚ÇÇ x))
  {j} (x y) (r : @R j x y) : x = y :=
begin
  cases x with a‚ÇÅ f‚ÇÅ,
  cases y with a‚ÇÇ f‚ÇÇ,
  dsimp [Mp] at *,
  have : a‚ÇÅ = a‚ÇÇ, {
    refine pfunctor.M_bisim
      (Œª i (a‚ÇÅ a‚ÇÇ : pfunctor.M (last P) i), ‚àÉ x y, @R i x y ‚àß x.1 = a‚ÇÅ ‚àß y.1 = a‚ÇÇ) _ _ _ _
      ‚ü®‚ü®a‚ÇÅ, f‚ÇÅ‚ü©, ‚ü®a‚ÇÇ, f‚ÇÇ‚ü©, r, rfl, rfl‚ü©,
    rintro _ _ _ ‚ü®‚ü®a‚ÇÅ, f‚ÇÅ‚ü©, ‚ü®a‚ÇÇ, f‚ÇÇ‚ü©, r, rfl, rfl‚ü©,
    rcases h _ _ _ r with ‚ü®a', f', f‚ÇÅ', f‚ÇÇ', e‚ÇÅ, e‚ÇÇ, h'‚ü©,
    rcases M_bisim_lemma P e‚ÇÅ with ‚ü®g‚ÇÅ', e‚ÇÅ', rfl, rfl‚ü©,
    rcases M_bisim_lemma P e‚ÇÇ with ‚ü®g‚ÇÇ', e‚ÇÇ', _, rfl‚ü©,
    rw [e‚ÇÅ', e‚ÇÇ'],
    exact ‚ü®_, _, _, rfl, rfl, Œª i b, ‚ü®_, _, h' _ b, rfl, rfl‚ü©‚ü© },
  subst this, congr, ext i p,
  induction p with x i' a f h' i j c x a f h' i j c p IH generalizing f‚ÇÅ f‚ÇÇ,
  all_goals {
    rcases h _ _ _ r with ‚ü®i, a', f', f‚ÇÅ', e‚ÇÅ, e‚ÇÇ, h''‚ü©,
    rcases M_bisim_lemma P e‚ÇÅ with ‚ü®g‚ÇÅ', e‚ÇÅ', rfl, rfl‚ü©,
    rcases M_bisim_lemma P e‚ÇÇ with ‚ü®g‚ÇÇ', e‚ÇÇ', e‚ÇÉ, rfl‚ü©,
    cases h'.symm.trans e‚ÇÅ',
    cases h'.symm.trans e‚ÇÇ' },
  { exact (congr_fun (congr_fun e‚ÇÉ i) _ : _) },
  { exact IH _ _ (h'' _ _) }
end

open pfunctor mvfunctor

@[reassoc]
theorem M_dest_map {Œ± Œ≤ : fam I} (g : Œ± ‚ü∂ Œ≤) :
  P.Mp.map g ‚â´ P.M_dest = P.M_dest ‚â´ P.map (append_fun g (P.Mp.map g)) :=
begin
  ext i x : 2,
  cases x with a f,
  simp [map_eq],
  conv { to_rhs, rw [M_dest, M_dest', map_eq', append_fun_comp_split_fun] },
  reflexivity,
end

end mvpfunctor
