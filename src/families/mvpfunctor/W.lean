/-
Copyright (c) 2018 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Jeremy Avigad

The W construction as a multivariate polynomial functor.
-/
import families.mvpfunctor.basic logic.basic
universes u v

namespace mvpfunctor

variables {I J : Type u} (P : mvpfunctor.{u} (J ‚äï I) I)

/- defines a typevec of labels to assign to each node of P.last.W -/
inductive W_path : Œ† {i}, P.last.W i ‚Üí J ‚Üí Type u
| root {i} (a : P.A i) (f : P.last.B i a ‚ü∂ P.last.W) (j : J) (c : P.drop.B i a j) :
    W_path ‚ü®a, f‚ü© j
| child {i} (a : P.A i) (f : P.last.B i a ‚ü∂ P.last.W) (j : I) (x : P.last.B i a j) (k : J) (c : W_path ((f : Œ† j, P.last.B i a j ‚Üí P.last.W j) x) k) :
    W_path ‚ü®a, f‚ü© k

variables {Œ± Œ≤ : fam J} {i : I} {a : P.A i}

def W_path_cases_on {f : P.last.B i a ‚ü∂ P.last.W}
    (g' : P.drop.B i a ‚ü∂ Œ±) (g : Œ† {j} (x : P.last.B i a j), P.W_path (f x) ‚ü∂ Œ±) :
  P.W_path ‚ü®a, f‚ü© ‚ü∂ Œ± :=
begin
  intros j x, cases x,
  case W_path.root : c { exact g' c },
  case W_path.child : j c { exact g c x_c }
end

def W_path_dest_left {f : P.last.B i a ‚ü∂ P.last.W}
    (h : P.W_path ‚ü®a, f‚ü© ‚ü∂ Œ±) :
  P.drop.B i a ‚ü∂ Œ± :=
Œª i c, h (W_path.root a f i c)

def W_path_dest_right {f : P.last.B i a ‚ü∂ P.last.W}
    (h : P.W_path ‚ü®a, f‚ü© ‚ü∂ Œ±) :
  Œ† j (x : P.last.B i a j), P.W_path (f x) ‚ü∂ Œ± :=
Œª j x i c, h (W_path.child _ _ j x _ c)

theorem W_path_dest_left_W_path_cases_on
    {f : P.last.B i a ‚ü∂ P.last.W}
    (g' : P.drop.B i a ‚ü∂ Œ±) (g : Œ† {j} (x : P.last.B i a j), P.W_path (f x) ‚ü∂ Œ±) :
  P.W_path_dest_left (P.W_path_cases_on g' @g) = g' := rfl

theorem W_path_dest_right_W_path_cases_on
    {f : P.last.B i a ‚ü∂ P.last.W}
    (g' : P.drop.B i a ‚ü∂ Œ±) (g : Œ† {j} (x : P.last.B i a j), P.W_path (f x) ‚ü∂ Œ±) :
  P.W_path_dest_right (P.W_path_cases_on g' @g) = @g  := rfl

theorem W_path_cases_on_eta {f : P.last.B i a ‚ü∂ P.last.W}
    (h : P.W_path ‚ü®a, f‚ü© ‚ü∂ Œ±) :
  P.W_path_cases_on (P.W_path_dest_left h) (P.W_path_dest_right h) = h :=
by ext i x; cases x; reflexivity

theorem comp_W_path_cases_on (h : Œ± ‚ü∂ Œ≤) {a : P.A i} {f : P.last.B i a ‚ü∂ P.last.W}
    (g' : P.drop.B i a ‚ü∂ Œ±) (g : Œ† j (x : P.last.B i a j), P.W_path (f x) ‚ü∂ Œ±) :
  P.W_path_cases_on g' g ‚â´ h = P.W_path_cases_on (g' ‚â´ h) (Œª i x, g i x ‚â´ h) :=
by ext i x; cases x; reflexivity

def Wp : mvpfunctor J I :=
{ A := P.last.W, B := Œª _, P.W_path }

def W (Œ± : fam J) : fam I := P.Wp.obj Œ±

-- instance mvfunctor_W : mvfunctor P.W := by delta W; apply_instance

/-
First, describe operations on `W` as a polynomial functor.
-/
def Wp_mk (a : P.A i) (f : P.last.B _ a ‚ü∂ P.last.W) (f' : P.W_path ‚ü®a, f‚ü© ‚ü∂ Œ±) :
  P.W Œ± i :=
‚ü®‚ü®a, f‚ü©, f'‚ü©

def Wp_ind {C : Œ† i (x : P.last.W i), (P.W_path x ‚ü∂ Œ±) ‚Üí Sort*}
  (ih : ‚àÄ i (a : P.A i) (f : P.last.B i a ‚ü∂ P.last.W)
    (f' : P.W_path ‚ü®a, f‚ü© ‚ü∂ Œ±),
      (‚àÄ i (x : P.last.B _ a i), C i (f x) (P.W_path_dest_right f' i _)) ‚Üí C i ‚ü®a, f‚ü© f') :
  Œ† i (x : P.last.W i) (f' : P.W_path x ‚ü∂ Œ±), C i x f' :=
by intros; induction x; apply ih; intros; apply x_ih

theorem Wp_ind_eq {C : Œ† i (x : P.last.W i), (P.W_path x ‚ü∂ Œ±) ‚Üí Sort*}
    (ih : ‚àÄ i (a : P.A i) (f : P.last.B i a ‚ü∂ P.last.W)
    (f' : P.W_path ‚ü®a, f‚ü© ‚ü∂ Œ±),
      (‚àÄ i (x : P.last.B _ a i), C i (f x) (P.W_path_dest_right f' i _)) ‚Üí C i ‚ü®a, f‚ü© f')
    {i} (a : P.A i) (f : P.last.B i a ‚ü∂ P.last.W) (f' : P.W_path ‚ü®a, f‚ü© ‚ü∂ Œ±) :
  P.Wp_ind ih _ ‚ü®a, f‚ü© f' = ih i a f f' (Œª i x, P.Wp_ind ih i (f x) (P.W_path_dest_right f' i _)) :=
rfl

def Wp_rec {C : Type*}
  (g : Œ† {i} (a : P.A i) (f : P.last.B i a ‚ü∂ P.last.W),
    (P.W_path ‚ü®a, f‚ü© ‚ü∂ Œ±) ‚Üí (Œ† j, P.last.B i a j ‚Üí C) ‚Üí C) :
  Œ† j (x : P.last.W j) (f' : P.W_path x ‚ü∂ Œ±), C
| i x f' := @Wp_ind _ _ P Œ± (Œª _ _ _, C) @g i x f'
-- g a f f' (Œª (j : I) (x : P.last.B i a j), Wp_rec j (f x) (P.W_path_dest_right f' j x)) .

theorem Wp_rec_eq {C : Type*}
    (g : Œ† i (a : P.A i) (f : P.last.B i a ‚ü∂  P.last.W),
      (P.W_path ‚ü®a, f‚ü© ‚ü∂ Œ±) ‚Üí (Œ† j, P.last.B i a j ‚Üí C) ‚Üí C)
    {i} (a : P.A i) (f : P.last.B i a ‚ü∂ P.last.W) (f' : P.W_path ‚ü®a, f‚ü© ‚ü∂ Œ±) :
  P.Wp_rec g _ ‚ü®a, f‚ü© f' = g i a f f' (Œª i x, P.Wp_rec g i (f x) (P.W_path_dest_right f' i _)) :=
@Wp_ind_eq _ _ P Œ± (Œª _ _ _, C) @g i _ _ f'

-- Note: we could replace Prop by Type* and obtain a dependent recursor

/-
Now think of W as defined inductively by the data ‚ü®a, f', f‚ü© where
- `a  : P.A` is the shape of the top node
- `f' : P.drop.B a ‚üπ Œ±` is the contents of the top node
- `f  : P.last.B a ‚Üí P.last.W` are the subtrees
 -/

def W_mk (a : P.A i) (f' : P.drop.B i a ‚ü∂ Œ±) (f : P.last.B i a ‚ü∂ P.W Œ±) :
  P.W Œ± i :=
let g  : P.last.B i a ‚ü∂ P.last.W  := Œª i x, (f x).fst,
    g' : P.W_path ‚ü®a, g‚ü© ‚ü∂ Œ± := P.W_path_cases_on f' (Œª i x, (f x).snd) in
‚ü®‚ü®a, g‚ü©, g'‚ü©

def W_rec {C : Type*}
    (g : Œ† i (a : P.A i), ((P.drop).B i a ‚ü∂ Œ±) ‚Üí
             ((P.last).B i a ‚ü∂ P.W Œ±) ‚Üí (Œ† j, (P.last).B i a j ‚Üí C) ‚Üí C) :
  Œ† i, P.W Œ± i ‚Üí C
| i ‚ü®a, f'‚ü© :=
  let g' i (a : P.A i) (f : P.last.B i a ‚ü∂ P.last.W) (h : P.W_path ‚ü®a, f‚ü© ‚ü∂ Œ±)
        (h' : Œ† j, P.last.B i a j ‚Üí C) : C :=
      g _ a (P.W_path_dest_left h) (Œª i x, ‚ü®f x, P.W_path_dest_right h i x‚ü©) h' in
  P.Wp_rec g' i a f'

theorem W_rec_eq {C : Type*}
    (g : Œ† i (a : P.A i), ((P.drop).B i a ‚ü∂ Œ±) ‚Üí
              ((P.last).B i a ‚ü∂ P.W Œ±) ‚Üí (Œ† j, (P.last).B i a j ‚Üí C) ‚Üí C)
    (i) (a : P.A i) (f' : P.drop.B i a ‚ü∂ Œ±) (f : P.last.B i a ‚ü∂ P.W Œ±) :
  P.W_rec g _ (P.W_mk a f' f) = g _ a f' f (Œª i x, P.W_rec g i (f x)) :=
begin
  rw [W_mk, W_rec], dsimp, rw [Wp_rec_eq],
  dsimp only [W_path_dest_left_W_path_cases_on, W_path_dest_right_W_path_cases_on],
  congr; ext i x : 2; cases (f x); refl
end

def W_ind {C : Œ† i, P.W Œ± i ‚Üí Sort*}
    (ih : ‚àÄ i (a : P.A i) (f' : P.drop.B i a ‚ü∂ Œ±) (f : P.last.B i a ‚ü∂ P.W Œ±),
            (‚àÄ j x, C j $ (f : Œ† j, P.last.B i a j ‚Üí P.W Œ± j) x) ‚Üí
            C i (P.W_mk a f' f)) :
  ‚àÄ i x, C i x
| i ‚ü®a,f‚ü© :=
@mvpfunctor.Wp_ind _ _ P Œ± (Œª i a f, C _ ‚ü®a, f‚ü©) (Œª i a f f',
  let ih'' := ih _ a (P.W_path_dest_left f') (Œª i x, ‚ü®f x, P.W_path_dest_right f' i x‚ü©) in
  cast (by dsimp [W_mk]; rw W_path_cases_on_eta) (ih'')) _ _ _

lemma sigma_abs {Œ±} {Œ≤ : Œ± ‚Üí Sort*} (a : Œ±) : Œ† {f g : Œ≤ a}, psigma.mk a f = psigma.mk a g ‚Üí f = g
| _ _ rfl := rfl

theorem W_ind_eq {C : Œ† i, P.W Œ± i ‚Üí Sort*}
    (g : Œ† i (a' : P.A i) (f : (P.drop).B i a' ‚ü∂ Œ±)
              (f' : (P.last).B i a' ‚ü∂ P.W Œ±),
              (Œ† j (a : (P.last).B i a' j),
                C j ((f' : Œ† j, P.last.B i a' j ‚Üí P.W Œ± j) a)) ‚Üí C i (P.W_mk a' f f'))
    (i) (a : P.A i) (f' : P.drop.B i a ‚ü∂ Œ±) (f : P.last.B i a ‚ü∂ P.W Œ±) :
  P.W_ind g _ (P.W_mk a f' f) = g _ a f' f (Œª i x, P.W_ind g i (f x)) :=
begin
  apply sigma_abs, dsimp [W_mk],
  conv { to_lhs, rw [W_ind], }, dsimp, congr,
  conv { to_lhs, rw [Wp_ind_eq,cast_eq], },
  congr' 1,
  { ext : 2, rw W_path_dest_right_W_path_cases_on, ext, refl, intro, refl },
  { ext : 1, refl, introv h, cases h, ext, refl, introv h, cases h, rw [W_path_dest_right_W_path_cases_on],
    cases h : f a_2, refl, },
end

@[elab_as_eliminator]
theorem W_cases {C : Œ† i, P.W Œ± i ‚Üí Prop}
    (ih : ‚àÄ i (a : P.A i) (f' : P.drop.B i a ‚ü∂ Œ±)
              (f : P.last.B i a ‚ü∂ P.W Œ±), C _ (P.W_mk a f' f)) :
  ‚àÄ i x, C i x :=
P.W_ind (Œª i a f' f ih', ih i a f' f)

def W_map {Œ± Œ≤ : fam J} (g : Œ± ‚ü∂ Œ≤) : P.W Œ± ‚ü∂ P.W Œ≤ :=
Œª i x, P.Wp.map g x

theorem W_mk_eq {i} (a : P.A i) (f : P.last.B i a ‚ü∂ P.last.W)
    (g' : P.drop.B i a ‚ü∂ Œ±) (g : Œ† j (x : P.last.B i a j), P.W_path (f x) ‚ü∂ Œ±) :
  P.W_mk a g' (Œª i x, ‚ü®f x, g _ _‚ü©) =
    ‚ü®‚ü®a, f‚ü©, P.W_path_cases_on g' g‚ü© := rfl

theorem W_map_W_mk (g : Œ± ‚ü∂ Œ≤)
    {i} (a : P.A i) (f' : P.drop.B i a ‚ü∂ Œ±) (f : P.last.B i a ‚ü∂ P.W Œ±) :
  P.W_map g (P.W_mk a f' f) = P.W_mk a (f' ‚â´ g) (f ‚â´ P.W_map g) :=
begin
  have : f ‚â´ P.Wp.map g = Œª _ i, ‚ü®(f i).fst, ((f i).snd) ‚â´ g‚ü©,
  { ext i x : 2, dsimp [function.comp,(‚â´)], cases (f x), refl },
  simp [W_map,this,W_mk,W_mk_eq,pfunctor.map_eq' P.Wp g,comp_W_path_cases_on],
end

-- TODO: this technical theorem is used in one place in constructing the initial algebra.
-- Can it be avoided?

@[reducible] def apply_append1 {Œ≤ : fam I}
    {i} (a : P.A i) (f' : P.drop.B i a ‚ü∂ Œ±) (f : P.last.B i a ‚ü∂ Œ≤) :
  P.obj (Œ±.append1 Œ≤) i :=
‚ü®a, fam.split_fun f' f ‚ü©

theorem map_apply_append1 {Œ≥ : fam J} (g : Œ± ‚ü∂ Œ≥)
  {i} (a : P.A i) (f' : P.drop.B i a ‚ü∂ Œ±) (f : P.last.B i a ‚ü∂ P.W Œ±) :
P.map (fam.append_fun g (P.W_map g)) (P.apply_append1 a f' f) =
  P.apply_append1 a (f' ‚â´ g) (f ‚â´ P.W_map g) :=
by erw [apply_append1, apply_append1, pfunctor.map_eq', ‚Üê fam.split_fun_comp]

/-
Yet another view of the W type: as a fixed point for a multivariate polynomial functor.
These are needed to use the W-construction to construct a fixed point of a qpf, since
the qpf axioms are expressed in terms of `map` on `P`.
-/
def W_mk' : P.obj (Œ±.append1 (P.W Œ±)) ‚ü∂ P.W Œ± :=
(Œª (i : I) ‚ü®a, f‚ü©, P.W_mk a (fam.drop_fun f) (fam.last_fun f) :
 Œ† i, P.obj (Œ±.append1 (P.W Œ±)) i ‚Üí P.W Œ± i)

def W_dest' : P.W Œ± ‚ü∂ P.obj (Œ±.append1 (P.W Œ±)) :=
show Œ† i, P.W Œ± i ‚Üí P.obj (Œ±.append1 (P.W Œ±)) i, from
P.W_ind (Œª j a f f' _,
  show pfunctor.obj P (fam.append1 Œ± (W P Œ±)) j,
  from ‚ü®a,fam.split_fun f f'‚ü©)

theorem W_dest'_W_mk {i}
    (a : P.A i) (f' : P.drop.B i a ‚ü∂ Œ±) (f : P.last.B i a ‚ü∂ P.W Œ±) :
  P.W_dest' (P.W_mk a f' f) = ‚ü®a, fam.split_fun f' f‚ü© :=
by simp [W_dest']; erw [W_ind_eq]

@[reassoc]
theorem W_dest'_W_mk' :
  P.W_mk' ‚â´ P.W_dest' = ùüô (P.obj (Œ±.append1 (P.W Œ±))) :=
by ext i ‚ü®a, f‚ü© : 2; simp! only [W_mk',(‚â´),(‚àò)]; rw [W_dest'_W_mk, fam.split_drop_fun_last_fun]; refl

theorem W_dest'_W_mk'' {i}
    (a : P.obj (Œ±.append1 (P.W Œ±)) i)  :
  P.W_dest' (P.W_mk' a) = a :=
by rcases a with ‚ü®a,f‚ü©; simp [W_mk', W_dest'_W_mk]

-- theorem W_ind_eq' {X Y : Œ† i, P.W Œ± i ‚Üí fam I}
--     (g : Œ† i (a' : P.A i) (f : (P.drop).B i a' ‚ü∂ Œ±)
--               (f' : (P.last).B i a' ‚ü∂ P.W Œ±),
--               (Œ† j (a : (P.last).B i a' j),
--                 (X j ((f' : Œ† j, P.last.B i a' j ‚Üí P.W Œ± j) a) ‚ü∂ Y j (f' a))) ‚Üí
--              (X i (P.W_mk a' f f') ‚ü∂ Y i (P.W_mk a' f f')))
--     (i) (a : P.A i) (f' : P.drop.B i a ‚ü∂ Œ±) (f : P.last.B i a ‚ü∂ P.W Œ±) :
-- P.W_mk' ‚â´ (W_ind P g : (X i (W_mk P a' f f') ‚ü∂ Y i (W_mk P a' f f'))) = _

end mvpfunctor
