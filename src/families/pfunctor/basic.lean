/-
Copyright (c) 2018 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Jeremy Avigad

Polynomial functors. Also expresses the W-type construction as a polynomial functor.
(For the M-type construction, see Mtype.lean.)
-/
import tactic.interactive data.multiset families.pfunctor.family for_mathlib
universes v v' u u'

/- TODO (Jeremy): move this. -/

namespace category_theory

namespace functor
open category_theory
variables {C : Type u} {D : Type u'} [category.{v} C] [category.{v'} D] (F : C ‚•§ D)

@[reassoc]
lemma map_comp_map {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : F.map f ‚â´ F.map g = F.map (f ‚â´ g) :=
(category_theory.functor.map_comp _ _ _).symm

end functor

end category_theory

namespace pfunctor

variables {I J : Type u} {F G : fam I ‚•§ fam J}

def liftp {Œ± : fam I} (p : fam.Pred Œ±) {X : fam J} : (X ‚ü∂ F.obj Œ±) ‚Üí Prop :=
Œª x, ‚àÉ u : X ‚ü∂ F.obj (fam.subtype p), u ‚â´ F.map fam.subtype.val = x

def liftr {Œ± Œ≤ : fam I} (r : fam.Pred (Œ± ‚äó Œ≤)) {X : fam J} : (X ‚ü∂ F.obj Œ±) ‚Üí (X ‚ü∂ F.obj Œ≤) ‚Üí Prop :=
Œª x y, ‚àÉ u : X ‚ü∂ F.obj (fam.subtype r),
  u ‚â´ F.map (fam.subtype.val ‚â´ fam.prod.fst) = x ‚àß
  u ‚â´ F.map (fam.subtype.val ‚â´ fam.prod.snd) = y

def supp {Œ± : fam I} {X : fam J} (x : X ‚ü∂ F.obj Œ±) : set (sigma Œ±) := { y : sigma Œ± | ‚àÄ ‚¶Ép‚¶Ñ, liftp p x ‚Üí p _ y.2 }

theorem of_mem_supp {Œ± : fam I} {X : fam J} {x : X ‚ü∂ F.obj Œ±} {p : fam.Pred Œ±} (h : liftp p x) :
  ‚àÄ y ‚àà supp x, p _ (sigma.snd y) :=
Œª y hy, hy h

open category_theory

attribute [reassoc] nat_trans.app_naturality nat_trans.naturality
open category_theory

lemma liftp_comp {Œ± : fam I} {X : fam J} {p : Œ† i, Œ± i ‚Üí Prop}
  (x : X ‚ü∂ F.obj Œ±) (h : F ‚ü∂ G) :
  liftp p x ‚Üí liftp p (x ‚â´ h.app _)
| ‚ü®u,h'‚ü© := ‚ü®u ‚â´ nat_trans.app h _, by rw ‚Üê h'; simp,‚ü©

lemma liftp_comp' {Œ± : fam I} {X : fam J} {p : Œ† i, Œ± i ‚Üí Prop}
  (x : X ‚ü∂ F.obj Œ±) (T : F ‚ü∂ G) (T' : G ‚ü∂ F)
  (h_inv : ‚àÄ {Œ±}, T.app Œ± ‚â´ T'.app Œ± = ùüô _):
  liftp p x ‚Üî liftp p (x ‚â´ T.app _) :=
‚ü® liftp_comp x T,
 Œª ‚ü®u,h'‚ü©, ‚ü®u ‚â´ T'.app _,by rw [category.assoc,‚Üê nat_trans.naturality,‚Üê category.assoc,h',category.assoc,h_inv,category.comp_id]‚ü© ‚ü©

lemma liftr_comp {Œ± : fam I} {X : fam J} (p : fam.Pred (Œ± ‚äó Œ±)) (x y : X ‚ü∂ F.obj Œ±)
   (T : F ‚ü∂ G) :
  liftr p x y ‚Üí liftr p (x ‚â´ T.app _) (y ‚â´ T.app _)
| ‚ü®u,h,h'‚ü© := ‚ü®u ‚â´ T.app _,
  by { reassoc! h h',
       rw ‚Üê h'; simp only [category.assoc, (nat_trans.naturality _ _).symm,*,eq_self_iff_true, and_self] }‚ü©

end pfunctor

/-
A polynomial functor `P` is given by a type `A` and a family `B` of types over `A`. `P` maps
any type `Œ±` to a new type `P.apply Œ±`.

An element of `P.apply Œ±` is a pair `‚ü®a, f‚ü©`, where `a` is an element of a type `A` and
`f : B a ‚Üí Œ±`. Think of `a` as the shape of the object and `f` as an index to the relevant
elements of `Œ±`.
-/

structure pfunctor (I J : Type u) :=
(A : fam J) (B : Œ† i, A i ‚Üí fam I)

namespace pfunctor

variables {I J : Type u} {Œ± Œ≤ : Type u}

section pfunc
variables (P : pfunctor I J)

-- TODO: generalize to psigma?
def apply : fam I ‚•§ fam J :=
{ obj := Œª X i, Œ£ a : P.A i, P.B i a ‚ü∂ X,
  map := Œª X Y f i ‚ü®a,g‚ü©, ‚ü®a, g ‚â´ f‚ü© }

def obj := P.apply.obj
def map {X Y : fam I} (f : X ‚ü∂ Y) : P.obj X ‚ü∂ P.obj Y := P.apply.map f

lemma map_id {X : fam I} : P.map (ùüô X) = ùüô _ :=
category_theory.functor.map_id _ _

@[reassoc]
lemma map_comp {X Y Z : fam I} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : P.map (f ‚â´ g) = P.map f ‚â´ P.map g :=
category_theory.functor.map_comp _ _ _

@[simp, reassoc]
lemma map_comp_map {X Y Z : fam I} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : P.map f ‚â´ P.map g = P.map (f ‚â´ g) :=
(category_theory.functor.map_comp _ _ _).symm

theorem map_eq' {Œ± Œ≤ : fam I} (f : Œ± ‚ü∂ Œ≤) {i : J} (a : P.A i) (g : P.B i a ‚ü∂ Œ±) :
  P.map f ‚ü®a, g‚ü© = ‚ü®a, g ‚â´ f‚ü© :=
rfl

open fam

@[simp, reassoc]
theorem map_eq {Œ± Œ≤ : fam I} (f : Œ± ‚ü∂ Œ≤) {i : J} (a : P.A i) (g : P.B i a ‚ü∂ Œ±) :
  value i (P.obj _) ‚ü®a, g‚ü© ‚â´ P.map f = value i (P.obj _) ‚ü®a, g ‚â´ f‚ü© :=
by ext _ ‚ü® ‚ü© : 2; simp [map_eq']

def Idx (i : J) := Œ£ (x : P.A i) j, P.B i x j

section
variables {P}
def Idx.idx {i : J} (x : Idx P i) : I := x.2.1
end

def obj.iget {i} [decidable_eq $ P.A i] {Œ± : fam I} (x : P.obj Œ± i) (j : P.Idx i) [inhabited $ Œ± j.2.1] : Œ± j.2.1 :=
if h : j.1 = x.1
  then x.2 (cast (by rw ‚Üê h) $ j.2.2)
  else default _

end pfunc

variables (P : pfunctor I I)

-- theorem id_map {Œ± : Type*} : ‚àÄ x : P.apply Œ±, id <$> x = id x :=
-- Œª ‚ü®a, b‚ü©, rfl

-- theorem comp_map {Œ± Œ≤ Œ≥ : Type*} (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ≥) :
--   ‚àÄ x : P.apply Œ±, (g ‚àò f) <$> x = g <$> (f <$> x) :=
-- Œª ‚ü®a, b‚ü©, rfl

-- instance : is_lawful_functor P.apply :=
-- {id_map := @id_map P, comp_map := @comp_map P}

inductive W : I ‚Üí Type u
-- | mk {i : I} (a : P.A i) (f : ‚àÄ j : I, P.B i a j ‚Üí W j) : W i
| mk {i : I} (a : P.A i) (f : P.B i a ‚ü∂ W) : W i

-- inductive W' : I -> Type u
-- | mk {a : A} : (‚àÄ k : K a, W' (f a k)) ‚Üí W' (g a)

def W_dest (P : pfunctor I I) {i} : W P i ‚Üí P.obj (W P) i
| ‚ü®a, f‚ü© := ‚ü®a, f‚ü©

def W_mk {i} : P.obj (W P) i ‚Üí W P i
| ‚ü®a, f‚ü© := ‚ü®a, f‚ü©

@[simp] theorem W_dest_W_mk {i} (p : P.obj (W P) i) : P.W_dest (P.W_mk p) = p :=
by cases p; reflexivity

@[simp] theorem W_mk_W_dest {i} (p : W P i) : P.W_mk (P.W_dest p) = p :=
by cases p; reflexivity

variables {P}

-- theorem Wp_ind {Œ± : fam I} {C : Œ† i (x : P.A i), (P.B i x ‚ü∂ Œ±) ‚Üí Prop}
--   (ih : ‚àÄ i (a : P.A i) (f : P.B i a ‚ü∂ P.W)
--     (f' : P.B i a ‚ü∂ Œ±),
--       (‚àÄ j (x : P.B _ a j), C j ((f : Œ† j, P.B i a j ‚Üí P.W j) x) x) ‚Üí C i ‚ü®a, f‚ü© f') :
--   Œ† i (x : P.last.W i) (f' : P.W_path x ‚ü∂ Œ±), C i x f'


-- @[simp]
-- lemma fst_map {Œ± Œ≤ : fam I} (x : P.apply.obj Œ± _) (f : Œ± ‚ü∂ Œ≤) :
--   (f <$> x).1 = x.1 := by { cases x; refl }

-- @[simp]
-- lemma iget_map [decidable_eq P.A] {Œ± Œ≤ : Type u} [inhabited Œ±] [inhabited Œ≤]
--   (x : P.apply Œ±) (f : Œ± ‚Üí Œ≤) (i : P.Idx)
--   (h : i.1 = x.1) :
--   (f <$> x).iget i = f (x.iget i) :=
-- by { simp [apply.iget],
--      rw [dif_pos h,dif_pos];
--      cases x, refl, rw h, refl }

end pfunctor

/-
Composition of polynomial functors.
-/

namespace pfunctor

/-
def comp : pfunctor.{u} ‚Üí pfunctor.{u} ‚Üí pfunctor.{u}
| ‚ü®A‚ÇÇ, B‚ÇÇ‚ü© ‚ü®A‚ÇÅ, B‚ÇÅ‚ü© := ‚ü®Œ£ a‚ÇÇ : A‚ÇÇ, B‚ÇÇ a‚ÇÇ ‚Üí A‚ÇÅ, Œª ‚ü®a‚ÇÇ, a‚ÇÅ‚ü©, Œ£ u : B‚ÇÇ a‚ÇÇ, B‚ÇÅ (a‚ÇÅ u)‚ü©
-/

variables {I J K : Type u} (P‚ÇÇ : pfunctor.{u} J K) (P‚ÇÅ : pfunctor.{u} I J)

def comp : pfunctor.{u} I K :=
‚ü® Œª i, Œ£ a‚ÇÇ : P‚ÇÇ.1 i, P‚ÇÇ.2 _ a‚ÇÇ ‚ü∂ P‚ÇÅ.1,
-- ‚ü® Œ£ a‚ÇÇ : P‚ÇÇ.1 _, P‚ÇÇ.2 _ a‚ÇÇ ‚Üí P‚ÇÅ.1, ¬≤
  Œª k a‚ÇÇa‚ÇÅ i, Œ£ j (u : P‚ÇÇ.2 _ a‚ÇÇa‚ÇÅ.1 j), P‚ÇÅ.2 _ (a‚ÇÇa‚ÇÅ.2 u) i ‚ü©

def comp.mk : Œ† (Œ± : fam I), P‚ÇÇ.obj (P‚ÇÅ.obj Œ±) ‚ü∂ (comp P‚ÇÇ P‚ÇÅ).obj Œ± :=
Œª Œ± k x, ‚ü® ‚ü®x.1,x.2 ‚â´ Œª j, sigma.fst‚ü©, Œª i a‚ÇÇa‚ÇÅ, (x.2 _).2 a‚ÇÇa‚ÇÅ.2.2 ‚ü©

def comp.get : Œ† (Œ± : fam I), (comp P‚ÇÇ P‚ÇÅ).obj Œ± ‚ü∂ P‚ÇÇ.obj (P‚ÇÅ.obj Œ±) :=
Œª Œ± k x, ‚ü® x.1.1, Œª j a‚ÇÇ, ‚ü®x.1.2 a‚ÇÇ, Œª i a‚ÇÅ, x.2 ‚ü®j, a‚ÇÇ, a‚ÇÅ‚ü©‚ü© ‚ü©

@[simp, reassoc]
lemma comp.mk_get : Œ† (Œ± : fam I), comp.mk P‚ÇÇ P‚ÇÅ Œ± ‚â´ comp.get P‚ÇÇ P‚ÇÅ Œ± = ùüô _ :=
Œª Œ±, funext $ Œª k, funext $ Œª ‚ü®x,y‚ü©, congr_arg (sigma.mk x) (by ext : 3; intros; refl)

@[simp, reassoc]
lemma comp.get_mk : Œ† (Œ± : fam I), comp.get P‚ÇÇ P‚ÇÅ Œ± ‚â´ comp.mk P‚ÇÇ P‚ÇÅ Œ± = ùüô _ :=
Œª Œ±, funext $ Œª k, funext $ Œª ‚ü®‚ü®a,c‚ü©,b‚ü©, congr_arg (sigma.mk _) $ by ext _ ‚ü®a,b,c‚ü©; refl

instance get.category_theory.is_iso {Œ± : fam I} : category_theory.is_iso (comp.get P‚ÇÇ P‚ÇÅ Œ±) :=
{ inv := comp.mk P‚ÇÇ P‚ÇÅ Œ± }

instance mk.category_theory.is_iso {Œ± : fam I} : category_theory.is_iso (comp.mk P‚ÇÇ P‚ÇÅ Œ±) :=
{ inv := comp.get P‚ÇÇ P‚ÇÅ Œ± }

@[simp, reassoc]
lemma comp.map_get : Œ† {Œ± Œ≤ : fam I} (f : Œ± ‚ü∂ Œ≤), (comp P‚ÇÇ P‚ÇÅ).map f ‚â´ comp.get P‚ÇÇ P‚ÇÅ Œ≤ = comp.get P‚ÇÇ P‚ÇÅ Œ± ‚â´ map _ (map _ f) :=
by { intros, ext _ ‚ü®a,b‚ü©; intros; refl }

@[simp, reassoc]
lemma comp.map_mk : Œ† {Œ± Œ≤ : fam I} (f : Œ± ‚ü∂ Œ≤), map _ (map _ f) ‚â´ comp.mk P‚ÇÇ P‚ÇÅ Œ≤ = comp.mk P‚ÇÇ P‚ÇÅ Œ± ‚â´ (comp P‚ÇÇ P‚ÇÅ).map f :=
Œª Œ± Œ≤ f,
@category_theory.mono.right_cancellation _ _ _ _ (comp.get P‚ÇÇ P‚ÇÅ Œ≤) _ _ _ _ (by simp)

end pfunctor

/-
Lifting predicates and relations.
-/

namespace pfunctor
variables {I J : Type u} {P : pfunctor.{u} I J}
open functor

@[simp]
lemma then_def {X Y Z : fam I} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) {i} (x : X i) : (f ‚â´ g) x = g (f x) := rfl

theorem liftp_iff {Œ± : fam I} {X : fam J} (p : fam.Pred Œ±) (x : X ‚ü∂ P.obj Œ±) :
  liftp p x ‚Üî ‚àÄ j (y : X j), ‚àÉ a f, x y = ‚ü®a, f‚ü© ‚àß ‚àÄ i a, p i (f a) :=
begin
  split,
  { rintros ‚ü®y, hy‚ü© j z, cases h : y z with a f,
    refine ‚ü®a, Œª i a, subtype.val (f a), _, Œª i a, subtype.property (f a)‚ü©, --, Œª i, (f i).property‚ü©,
    fold pfunctor.map pfunctor.obj at *,
    simp [hy.symm, (‚â´), h, map_eq'],
    simp [(‚àò),fam.subtype.val], },
  introv hv, dsimp [liftp],
  mk_constructive hv,
  let F‚ÇÄ := Œª j k, (hv j k).1,
  let F‚ÇÅ : Œ† j k, P.B j (F‚ÇÄ j k) ‚ü∂ Œ± := Œª j k, (hv j k).2.1,
  have F‚ÇÇ : ‚àÄ j k, x k = ‚ü®F‚ÇÄ j k,F‚ÇÅ j k‚ü© := Œª j k, (hv j k).2.2.1,
  have F‚ÇÉ : ‚àÄ j k i a, p i (F‚ÇÅ j k a) := Œª j k, (hv j k).2.2.2,
  refine ‚ü®Œª j x, ‚ü®F‚ÇÄ j x,Œª i y, ‚ü®F‚ÇÅ j x y,F‚ÇÉ j x i y‚ü©‚ü©,_‚ü©,
  ext : 2, dsimp, rw F‚ÇÇ, refl
end

theorem liftr_iff {Œ± Œ≤ : fam I} (r : fam.Pred (Œ± ‚äó Œ≤)) {X : fam J} (x : X ‚ü∂ P.obj Œ±) {y} :
  liftr r x y ‚Üî ‚àÄ j (z : X j), ‚àÉ a f‚ÇÄ f‚ÇÅ, x z = ‚ü®a, f‚ÇÄ‚ü© ‚àß y z = ‚ü®a, f‚ÇÅ‚ü© ‚àß ‚àÄ i a, r i (f‚ÇÄ a, f‚ÇÅ a) :=
begin
  split,
  { rintros ‚ü®u, xeq, yeq‚ü© j z, cases h : u z with a f,
    -- use a, have := Œª i (b : P.B j a i), (f b).val,
    use [a, Œª i b, (f b).val.fst, Œª i b, (f b).val.snd],
    split, { rw [‚Üêxeq, then_def, h], refl },
    split, { rw [‚Üêyeq, then_def, h], refl },
    intros i a, convert (f a).property, simp [fam.prod.fst,fam.prod.snd,fam.subtype.val] },
  rintros hv, dsimp [liftr],
  mk_constructive hv,
  let F‚ÇÄ := Œª j k, (hv j k).1,
  let F‚ÇÅ : Œ† j k, P.B j (F‚ÇÄ j k) ‚ü∂ Œ± := Œª j k, (hv j k).2.1,
  let F‚ÇÇ : Œ† j k, P.B j (F‚ÇÄ j k) ‚ü∂ Œ≤ := Œª j k, (hv j k).2.2.1,
  fold pfunctor.map,
  have F‚ÇÉ : ‚àÄ j k, x k = ‚ü®F‚ÇÄ j k,F‚ÇÅ j k‚ü© := Œª j k, (hv j k).2.2.2.1,
  have F‚ÇÑ : ‚àÄ j k, y k = ‚ü®F‚ÇÄ j k,F‚ÇÇ j k‚ü© := Œª j k, (hv j k).2.2.2.2.1,
  have F‚ÇÖ : ‚àÄ j k i a, r i (F‚ÇÅ j k a, F‚ÇÇ j k a) := Œª j k, (hv j k).2.2.2.2.2,
  refine ‚ü®Œª j x, ‚ü®F‚ÇÄ j x,Œª i y, _‚ü©,_‚ü©,
  { refine ‚ü®(F‚ÇÅ j x y,F‚ÇÇ j x y),F‚ÇÖ _ _ _ _‚ü© },
  split; ext : 2; [rw F‚ÇÉ,rw F‚ÇÑ]; refl,
end

end pfunctor

/-
Facts about the general quotient needed to construct final coalgebras.

TODO (Jeremy): move these somewhere.
-/

namespace quot

def factor {I} {Œ± : fam I} (r s: fam.Pred (Œ± ‚äó Œ±))
  (h : ‚àÄ i (a : fam.unit i ‚ü∂ Œ± ‚äó Œ±), a ‚ä® r ‚Üí a ‚ä® s) :
  fam.quot r ‚ü∂ fam.quot s :=
-- _
fam.quot.lift _ (fam.quot.mk _)
(Œª X a h', fam.quot.sound _ (h _ _ h') )

def factor_mk_eq {I} {Œ± : fam I} (r s: fam.Pred (Œ± ‚äó Œ±))
  (h : ‚àÄ i (a : fam.unit i ‚ü∂ Œ± ‚äó Œ±), a ‚ä® r ‚Üí a ‚ä® s) :
  fam.quot.mk _ ‚â´ factor r s h = fam.quot.mk _ := rfl

end quot
