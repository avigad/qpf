/-
Copyright (c) 2018 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Jeremy Avigad

Multivariate quotients of polynomial functors.
-/
import ..mvpfunctor.W
universe u

class mvqpf {I J : Type u} (F : fam I ‚•§ fam J) :=
(P         : mvpfunctor.{u} I J)
(abs       : Œ† Œ±, P.obj Œ± ‚ü∂ F.obj Œ±)
(repr      : Œ† Œ±, F.obj Œ± ‚ü∂ P.obj Œ±)
(abs_repr  : ‚àÄ Œ±, repr Œ± ‚â´ abs Œ± = ùüô _)
(abs_map   : ‚àÄ {Œ± Œ≤} (f : Œ± ‚ü∂ Œ≤), P.map f ‚â´ abs _ = abs _ ‚â´ F.map f)

namespace mvqpf
variables {I J : Type u} {F : fam I ‚•§ fam J} [q : mvqpf F]
open pfunctor (liftp liftr)

-- def repr {Œ± : typevec n} (x : F Œ±) := repr' n x

-- theorem abs_repr {Œ± : fam I} (x : F Œ±) : abs (repr x) = x :=
-- abs_repr' n x

/-
Show that every mvqpf is a lawful mvfunctor.
-/
include q

theorem abs_repr' {Œ±} {i} (x : F.obj Œ± i) : abs F Œ± (repr F Œ± x) = x :=
show (repr F Œ± ‚â´ abs F Œ±) x = x, by rw abs_repr; refl

theorem abs_map' {Œ± Œ≤ : fam I} (f : Œ± ‚ü∂ Œ≤) {i} {x : (P F).obj Œ± i} : abs _ _ ((P F).map f x) = F.map f (abs F Œ± x) :=
show ((P F).map f ‚â´ abs _ _) x = (abs _ _ ‚â´ F.map f) x, by rw abs_map


-- theorem id_map {Œ± : typevec n} (x : F Œ±) : typevec.id <$$> x = x :=
-- by { rw ‚Üêabs_repr x, cases repr x with a f, rw [‚Üêabs_map], reflexivity }

-- theorem comp_map {Œ± Œ≤ Œ≥ : typevec n} (f : Œ± ‚üπ Œ≤) (g : Œ≤ ‚üπ Œ≥) (x : F Œ±) :
--   (g ‚äö f) <$$> x = g <$$> f <$$> x :=
-- by { rw ‚Üêabs_repr x, cases repr x with a f, rw [‚Üêabs_map, ‚Üêabs_map, ‚Üêabs_map], reflexivity }

-- instance is_lawful_mvfunctor : mvfunctor.is_lawful F :=
-- { id_map := @id_map n F _ _,
--   comp_map := @comp_map n F _ _ }

-- def mk_B {X : fam J} (P : mvpfunctor I J) (a : X ‚ü∂ P.A) (Œ± : fam I) : Sort* :=
-- Œ† (i : J) (x : X i), P.B i (a x) ‚ü∂ Œ±

-- def mk_obj {Œ± : fam I} {X : fam J} : Œ† (P : mvpfunctor I J) (a : X ‚ü∂ P.A), mk_B P a Œ± ‚Üí (X ‚ü∂ P.obj Œ±)
-- | P a f i x := ‚ü®a x,f _ x‚ü©

-- def P_A (Œ±) : Œ† (P : mvpfunctor I J), P.obj Œ± ‚ü∂ P.A
-- | P i x := x.1

-- def P_B {Œ±} : Œ† (P : mvpfunctor I J), mk_B P (P_A Œ± P) Œ±
-- | P i ‚ü®a,f‚ü© j b := f b

-- include q
-- set_option pp.implicit true
/- Lifting predicates and relations -/

theorem liftp_iff {Œ± : fam I} {X : fam J} (p : Œ† i, Œ± i ‚Üí Prop) (x : X ‚ü∂ F.obj Œ±) :
  liftp p x ‚Üî ‚àÄ j (y : X j), ‚àÉ a f, x y = abs F Œ± ‚ü®a,f‚ü© ‚àß ‚àÄ i a, p i (f a) :=
begin
  split,
  { rintros ‚ü®y, hy‚ü© j z, cases h : repr F _ (y z) with a f,
    use [a,f ‚â´ fam.subtype.val _], split,
    { rw [‚Üê pfunctor.map_eq, ‚Üê h, abs_map', abs_repr', ‚Üê hy], reflexivity },
    intros i j, apply (f j).property },
  rintros f,
  mk_constructive f,
  let g : X ‚ü∂ (P F).obj (fam.subtype p),
  { intros i y, rcases f i y with ‚ü®a,g,h,h'‚ü©,
    refine ‚ü®a,_‚ü©, intros k b, refine ‚ü®g b,h' _ _‚ü©, },
  have h : g ‚â´ (P F).map (fam.subtype.val _) ‚â´ abs F _ = x,
  { dsimp [g], ext : 2, simp,
    rcases (f x_1 x_2) with ‚ü®a,g,h,h'‚ü©, simp [h],
    dsimp [pfunctor.map,pfunctor.apply], refl },
  refine ‚ü®g ‚â´ abs F _, _‚ü©,
  rw [category_theory.category.assoc,‚Üê abs_map,h],
end

theorem liftr_iff {Œ± : typevec n} (r : Œ† ‚¶Éi‚¶Ñ, Œ± i ‚Üí Œ± i ‚Üí Prop) (x y : F Œ±) :
  liftr r x y ‚Üî ‚àÉ a f‚ÇÄ f‚ÇÅ, x = abs ‚ü®a, f‚ÇÄ‚ü© ‚àß y = abs ‚ü®a, f‚ÇÅ‚ü© ‚àß ‚àÄ i j, r (f‚ÇÄ i j) (f‚ÇÅ i j) :=
begin
  split,
  { rintros ‚ü®u, xeq, yeq‚ü©, cases h : repr u with a f,
    use [a, Œª i j, (f i j).val.fst, Œª i j, (f i j).val.snd],
    split, { rw [‚Üêxeq, ‚Üêabs_repr u, h, ‚Üêabs_map], refl },
    split, { rw [‚Üêyeq, ‚Üêabs_repr u, h, ‚Üêabs_map], refl },
    intros i j, exact (f i j).property },
  rintros ‚ü®a, f‚ÇÄ, f‚ÇÅ, xeq, yeq, h‚ü©,
  use abs ‚ü®a, Œª i j, ‚ü®(f‚ÇÄ i j, f‚ÇÅ i j), h i j‚ü©‚ü©,
  dsimp, split,
  { rw [xeq, ‚Üêabs_map], refl },
  rw [yeq, ‚Üêabs_map], refl
end

end mvqpf
