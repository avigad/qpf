
import families.mvpfunctor.basic
import families.mvqpf.basic

import category_theory.products

universes u

namespace mvqpf
variables {I J K : Type u}
  (F : fam I ‚•§ fam J) [q  : mvqpf F]
  (G : fam J ‚•§ fam K) [q' : mvqpf G]

open category_theory

-- def comp (v : fam J) : fam K :=
-- -- F $ Œª i : fin' n, G i v
-- Œª k : K, F.obj (Œª i : I, (G i).obj v k) _

namespace comp
open mvfunctor mvpfunctor
variables {F G} {Œ± Œ≤ : fam J} (f : Œ± ‚ü∂ Œ≤)

-- protected def mk (x : F $ Œª i, G i Œ±) : (comp F G) Œ± := x

-- protected def get (x : (comp F G) Œ±) : F $ Œª i, G i Œ± := x

-- @[simp] protected lemma mk_get (x : (comp F G) Œ±) : comp.mk (comp.get x) = x := rfl

-- @[simp] protected lemma get_mk (x : F $ Œª i, G i Œ±) : comp.get (comp.mk x) = x := rfl

-- protected def map' : (Œª (i : fin' n), G i Œ±) ‚üπ Œª (i : fin' n), G i Œ≤ :=
-- Œª i, map f

-- protected def map : (comp F G) Œ± ‚Üí (comp F G) Œ≤ :=
-- (map (Œª i, map f) : F (Œª i, G i Œ±) ‚Üí F (Œª i, G i Œ≤))

-- instance : mvfunctor (comp F G) :=
-- { map := Œª Œ± Œ≤, comp.map }

-- lemma map_mk (x : F $ Œª i, G i Œ±) :
--   f <$$> comp.mk x = comp.mk ((Œª i (x : G i Œ±), f <$$> x) <$$> x) := rfl

-- lemma get_map (x : comp F G Œ±) :
--   comp.get (f <$$> x) = (Œª i (x : G i Œ±), f <$$> x) <$$> comp.get x := rfl

include q q'

local attribute [simp] category_theory.functor.map_comp_map category_theory.functor.map_comp_map_assoc
local attribute [-simp] functor.map_comp functor.map_comp_assoc

instance : mvqpf (F ‚ãô G) :=
{ P         := pfunctor.comp (P G) (P F),
  abs       := Œª Œ±, pfunctor.comp.get _ _ Œ± ‚â´ (P G).map (abs F _) ‚â´ abs G _ ‚â´ ùüô (G.obj (F.obj Œ±)),
  repr      := Œª Œ±, ùüô (G.obj (F.obj Œ±)) ‚â´ @repr _ _ G q' _ ‚â´ (P G).map (repr F Œ±) ‚â´ pfunctor.comp.mk _ _ _,
  abs_repr := by { intros, simp [category_theory.category.id_comp], erw category_theory.category.id_comp, refl },
  abs_map  := by { intros, simp [abs_map], } }

end comp

end mvqpf
