/-
Copyright (c) 2018 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Jeremy Avigad

The initial algebra of a multivariate qpf is again a qpf.
-/
import ..mvpfunctor.W .basic
universes u v

namespace mvqpf

open pfunctor (liftp liftr) category_theory

variables {I J : Type u} {F : fam (I ‚äï J) ‚•§ fam J} [q : mvqpf F] {Œ± : fam I} {Œ≤ : fam J}
include q

/-- does recursion on `q.P.W` using `g : F Œ± ‚Üí Œ±` rather than `g : P Œ± ‚Üí Œ±` -/
def recF (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤) : q.P.W Œ± ‚ü∂ Œ≤ :=
q.P.W_ind (Œª j a f' f rec,
  g (abs _ ‚ü®a,fam.split_fun f' rec‚ü©))

theorem recF_eq (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤)
    {i} (a : q.P.A i) (f' : q.P.drop.B i a ‚ü∂ Œ±) (f : q.P.last.B i a ‚ü∂ q.P.W Œ±) :
  recF g (q.P.W_mk a f' f) =  g (abs _ ‚ü®a, fam.split_fun f' (f ‚â´ recF g)‚ü©) :=
by simp only [recF]; rw [mvpfunctor.W_ind_eq]; refl

theorem recF_eq' (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤) :
  recF g = q.P.W_dest' ‚â´ q.P.map (fam.append_fun (ùüô _) (recF g)) ‚â´ abs _ ‚â´ g :=
begin
  ext i x : 2,
  apply q.P.W_cases _ _ x,
  intros j a f' f, erw [recF_eq], apply congr_arg (@g _),
  erw [pfunctor.map_eq',mvfunctor.append_fun_comp_split_fun], congr,
  ext : 2, dsimp, rw mvpfunctor.W_path_dest_right_W_path_cases_on, cases f x_2; refl,
end

inductive Wequiv : Œ† {i}, q.P.W Œ± i ‚Üí q.P.W Œ± i ‚Üí Prop
| ind {i} (a : q.P.A i) (f' : q.P.drop.B i a ‚ü∂ Œ±) (f‚ÇÄ f‚ÇÅ : q.P.last.B i a ‚ü∂ q.P.W Œ±) :
    (‚àÄ j (x : q.P.last.B i a j), Wequiv ((f‚ÇÄ : Œ† j, q.P.last.B i a j ‚Üí q.P.W Œ± j) x) (f‚ÇÅ x)) ‚Üí Wequiv (q.P.W_mk a f' f‚ÇÄ) (q.P.W_mk a f' f‚ÇÅ)
| abs {i} (a‚ÇÄ : q.P.A i) (f'‚ÇÄ : q.P.drop.B i a‚ÇÄ ‚ü∂ Œ±) (f‚ÇÄ : q.P.last.B i a‚ÇÄ ‚ü∂ q.P.W Œ±)
          (a‚ÇÅ : q.P.A i) (f'‚ÇÅ : q.P.drop.B i a‚ÇÅ ‚ü∂ Œ±) (f‚ÇÅ : q.P.last.B i a‚ÇÅ ‚ü∂ q.P.W Œ±) :
      abs _ ‚ü®a‚ÇÄ, q.P.append_contents f'‚ÇÄ f‚ÇÄ‚ü© = abs _ ‚ü®a‚ÇÅ, q.P.append_contents f'‚ÇÅ f‚ÇÅ‚ü© ‚Üí
        Wequiv (q.P.W_mk a‚ÇÄ f'‚ÇÄ f‚ÇÄ) (q.P.W_mk a‚ÇÅ f'‚ÇÅ f‚ÇÅ)
| trans {i} (u v w : q.P.W Œ± i) : Wequiv u v ‚Üí Wequiv v w ‚Üí Wequiv u w

open fam

theorem recF_eq_of_Wequiv (Œ± : fam I) {Œ≤ : fam J} (u : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤)
    ‚¶Éi‚¶Ñ (x y : q.P.W Œ± i) :
  Wequiv x y ‚Üí recF u x = recF u y :=
begin
  revert i x, refine q.P.W_cases _ ,
  intros i a‚ÇÄ f'‚ÇÄ f‚ÇÄ y,
  revert i y, refine q.P.W_cases _,
  intros i a‚ÇÅ f'‚ÇÅ f‚ÇÅ, introv,
  intro h, induction h,
  case mvqpf.Wequiv.ind : j a f' f‚ÇÄ f‚ÇÅ h ih
  { have : f‚ÇÄ ‚â´ recF u = f‚ÇÅ ‚â´ recF u, { ext : 2, simp only [ih, pfunctor.then_def] },
    simp only [recF_eq, this, ih, fam.split_fun_comp] },
  case mvqpf.Wequiv.abs : j a‚ÇÄ f'‚ÇÄ f‚ÇÄ a‚ÇÅ f'‚ÇÅ f‚ÇÅ h ih
    { rw [recF_eq'], simp only [abs_map_assoc, mvpfunctor.W_dest'_W_mk, h, pfunctor.then_def] },
  case mvqpf.Wequiv.trans : i x y z e‚ÇÅ e‚ÇÇ ih‚ÇÅ ih‚ÇÇ
    { exact eq.trans ih‚ÇÅ ih‚ÇÇ }
end

theorem Wequiv.abs' ‚¶Éi‚¶Ñ (x y : q.P.W Œ± i)
    (h : abs _ (q.P.W_dest' x) = abs _ (q.P.W_dest' y)) :
  Wequiv x y :=
begin
  revert i x h, refine q.P.W_cases _,
  intros i a‚ÇÄ f'‚ÇÄ f‚ÇÄ y,
  revert i y, refine q.P.W_cases _,
  intros i a‚ÇÅ f'‚ÇÅ f‚ÇÅ, introv,
  apply Wequiv.abs
end

theorem Wequiv.refl ‚¶Éi‚¶Ñ (x : q.P.W Œ± i) : Wequiv x x :=
by apply q.P.W_cases _ _ x; intros i a f' f; exact Wequiv.abs a f' f a f' f rfl

theorem Wequiv.symm ‚¶Éi‚¶Ñ (x y : q.P.W Œ± i) : Wequiv x y ‚Üí Wequiv y x :=
begin
  intro h, induction h,
  case mvqpf.Wequiv.ind : i a f' f‚ÇÄ f‚ÇÅ h ih
    { exact Wequiv.ind _ _ _ _ ih },
  case mvqpf.Wequiv.abs : i a‚ÇÄ f'‚ÇÄ f‚ÇÄ a‚ÇÅ f'‚ÇÅ f‚ÇÅ h ih
    { exact Wequiv.abs _ _ _ _ _ _ h.symm },
  case mvqpf.Wequiv.trans : i x y z e‚ÇÅ e‚ÇÇ ih‚ÇÅ ih‚ÇÇ
    { exact mvqpf.Wequiv.trans _ _ _ ih‚ÇÇ ih‚ÇÅ}
end

/-- maps every element of the W type to a canonical representative -/
def Wrepr : q.P.W Œ± ‚ü∂ q.P.W Œ± := recF (repr _ ‚â´ q.P.W_mk')

-- set_option pp.implicit true

theorem Wrepr_W_mk  ‚¶Éi‚¶Ñ
    (a : q.P.A i) (f' : q.P.drop.B i a ‚ü∂ Œ±) (f : q.P.last.B i a ‚ü∂ q.P.W Œ±) :
  Wrepr (q.P.W_mk a f' f) =
    q.P.W_mk' (repr _ (abs _ (q.P.map (fam.append_fun (ùüô _) Wrepr) ‚ü®a, q.P.append_contents f' f‚ü©))) :=
by simp only [Wrepr, recF_eq, split_fun_comp_right, pfunctor.then_def]; refl

theorem Wrepr_W_mk'  ‚¶Éi‚¶Ñ
    (a : q.P.A i) (f' : q.P.drop.B i a ‚ü∂ Œ±) (f : q.P.last.B i a ‚ü∂ q.P.W Œ±) :
  q.P.W_mk' ‚â´ Wrepr =
     q.P.map (fam.append_fun (ùüô _) Wrepr) ‚â´ abs _ ‚â´ repr (Œ±.append1 _) ‚â´ q.P.W_mk' :=
by { ext1, ext1 ‚ü®a,f‚ü©, simp only [mvpfunctor.W_mk', Wrepr_W_mk, abs_map', pfunctor.then_def], congr,
     ext1 ‚ü® ‚ü©; ext1; refl }

theorem Wrepr_equiv ‚¶Éi‚¶Ñ (x : q.P.W Œ± i) : Wequiv (Wrepr x) x :=
begin
  apply q.P.W_ind _ _ x, intros i a f' f ih,
  apply Wequiv.trans _ (q.P.W_mk a f' (f ‚â´ Wrepr)),
  { apply Wequiv.abs',
    rw [Wrepr_W_mk, q.P.W_dest'_W_mk, q.P.W_dest'_W_mk'', abs_repr', pfunctor.map_eq'],
    congr, erw [‚Üê split_fun_comp,category.comp_id], },
  apply Wequiv.ind, exact ih
end

theorem Wequiv_map {Œ± Œ≤ : fam I} (g : Œ± ‚ü∂ Œ≤) ‚¶Éi‚¶Ñ (x y : q.P.W Œ± i) :
  Wequiv x y ‚Üí Wequiv (q.P.W_map g x) (q.P.W_map g y) :=
begin
  intro h, induction h,
  case mvqpf.Wequiv.ind : i a f' f‚ÇÄ f‚ÇÅ h ih
    { erw [q.P.W_map_W_mk, q.P.W_map_W_mk], apply Wequiv.ind, apply ih },
  case mvqpf.Wequiv.abs : j a‚ÇÄ f'‚ÇÄ f‚ÇÄ a‚ÇÅ f'‚ÇÅ f‚ÇÅ h ih
    { rw [q.P.W_map_W_mk, q.P.W_map_W_mk], apply Wequiv.abs,
      rw [mvpfunctor.append_contents_comp, mvpfunctor.append_contents_comp, ‚Üê pfunctor.map_eq', ‚Üê pfunctor.map_eq', abs_map', abs_map', h]},
  case mvqpf.Wequiv.trans : i x y z e‚ÇÅ e‚ÇÇ ih‚ÇÅ ih‚ÇÇ
    { apply mvqpf.Wequiv.trans, apply ih‚ÇÅ, apply ih‚ÇÇ }
end

/-
Define the fixed point as the quotient of trees under the equivalence relation.
-/

def W_setoid (Œ± : fam I) (i) : setoid (q.P.W Œ± i) :=
‚ü®Wequiv, @Wequiv.refl _ _ _ _ _ _, @Wequiv.symm _ _ _ _ _ _, @Wequiv.trans _ _ _ _ _ _‚ü©

local attribute [instance] W_setoid

def fix (F : fam (I‚äïJ) ‚•§ fam J) [q : mvqpf F] (Œ± : fam I) : fam J
| i := quotient (W_setoid Œ± i : setoid (q.P.W Œ± i))

def fix.map {Œ± Œ≤ : fam I} : Œ† (g : Œ± ‚ü∂ Œ≤), fix F Œ± ‚ü∂ fix F Œ≤
| g i :=
quotient.lift (Œª x : q.P.W Œ± i, ‚ü¶q.P.W_map g x‚üß)
  (Œª a b h, quot.sound (Wequiv_map _ _ _ h))

section

variable (F)

def pFix : fam I ‚•§ fam J :=
{ obj := fix F,
  map := Œª X Y f, fix.map f }

end

def Wequiv' : fam.Pred (q.P.W Œ± ‚äó q.P.W Œ±) :=
Œª i x, Wequiv x.1 x.2

def pEq : fam.Pred (Œ± ‚äó Œ±) :=
Œª i x, x.1 = x.2

def fix.lift (f : q.P.W Œ± ‚ü∂ Œ≤) (h : ‚àÄ {i} a b : q.P.W Œ± i, Wequiv a b ‚Üí f a = f b) : (fix F Œ± ‚ü∂ Œ≤) :=
Œª i x, quot.lift (@f i) h x

-- TODO: should this be quotient.lift?
def fix.rec (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤) : fix F Œ± ‚ü∂ Œ≤ :=
fix.lift (recF g) (recF_eq_of_Wequiv Œ± g)

def fix_to_W : fix F Œ± ‚ü∂ q.P.W Œ± :=
fix.lift Wrepr (recF_eq_of_Wequiv Œ± (Œª i x, q.P.W_mk' (repr _ x)))

def fix.quot.mk : q.P.W Œ± ‚ü∂ fix F Œ± :=
Œª i x, quot.mk _ x

@[simp, reassoc]
lemma fix.quot.mk_lift {Œ≥ : fam J} (g : q.P.W Œ± ‚ü∂ Œ≥)
      (h : ‚àÄ ‚¶Éi : J‚¶Ñ (a b : mvpfunctor.W (P F) Œ± i), Wequiv a b ‚Üí g a = g b) :
  fix.quot.mk ‚â´ fix.lift g h = g :=
by ext; simp only [fix.lift, fix.quot.mk, pfunctor.then_def]

@[simp]
lemma fix.quot.lift_comp {Œ≥ : fam J} (f : q.P.W Œ± ‚ü∂ Œ≤) (g : Œ≤ ‚ü∂ Œ≥)
      (h : ‚àÄ ‚¶Éi : J‚¶Ñ (a b : mvpfunctor.W (P F) Œ± i), Wequiv a b ‚Üí f a = f b) :
  fix.lift f h ‚â´ g = fix.lift (f ‚â´ g) (Œª i a b h', have _, from congr_arg (@g i) (h a b h'), this) :=
by { ext, dsimp [fix.lift,(‚â´)], induction x_1 using quot.ind, refl }

-- @[extensionality]
-- lemma fix.quot.lift_ext (f g : q.P.W Œ± ‚ü∂ Œ≤)
--       (hh : fix_to_W ‚â´ f = fix_to_W ‚â´ g)
--       (h h') :
--   fix.lift f @h = fix.lift g @h' := _

def fix.mk : F.obj (Œ±.append1 (fix F Œ±)) ‚ü∂ fix F Œ± :=
repr _ ‚â´ q.P.map (fam.append_fun (ùüô _) fix_to_W) ‚â´ q.P.W_mk' ‚â´ fix.quot.mk

def fix.dest : fix F Œ± ‚ü∂ F.obj (Œ±.append1 (fix F Œ±)) :=
fix.rec (F.map $ fam.append_fun (ùüô _) fix.mk)

lemma fix_to_W_recF (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤) : fix_to_W ‚â´ recF g = fix.rec g :=
by { ext i a : 2, apply quotient.induction_on a, intro x,
     apply recF_eq_of_Wequiv, apply Wrepr_equiv }

-- @[extensionality]
lemma fix.quot.lift_ext (f g : fix F Œ± ‚ü∂ Œ≤)
      (hh : fix.quot.mk ‚â´ f = fix.quot.mk ‚â´ g) :
  f = g :=
begin
  ext a b, apply quot.induction_on b,
  replace hh := Œª x, congr_fun (congr_fun hh x),
  intro, apply hh
end

@[reassoc]
theorem fix.rec_eq (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤) : -- ‚¶Éi‚¶Ñ (x : F.obj (Œ±.append1 (fix F Œ±)) i) :
  fix.mk ‚â´ fix.rec g = F.map (fam.append_fun (ùüô _) (fix.rec g)) ‚â´ g :=
begin
  conv { to_lhs, rw [fix.rec,fix.mk] }, simp only [fix.quot.mk_lift, category.assoc],
  rw [recF_eq', abs_map_assoc, mvpfunctor.W_dest'_W_mk'_assoc, abs_map_assoc, abs_repr_assoc,
        ‚Üê category_theory.functor.map_comp_assoc,‚Üê append_fun_comp, category.id_comp, fix_to_W_recF],
end

theorem fix.ind_aux {i} (a : q.P.A i) (f' : q.P.drop.B _ a ‚ü∂ Œ±) (f : q.P.last.B i a ‚ü∂ q.P.W Œ±) :
  fix.mk (abs _ ‚ü®a, q.P.append_contents f' (Œª i x, ‚ü¶f x‚üß)‚ü©) = ‚ü¶q.P.W_mk a f' f‚üß :=
have fix.mk (abs _ ‚ü®a, q.P.append_contents f' (Œª i x, ‚ü¶f x‚üß)‚ü©) = ‚ü¶Wrepr (q.P.W_mk a f' f)‚üß,
  begin
    apply quot.sound, apply Wequiv.abs',
    rw [mvpfunctor.W_dest'_W_mk'', abs_map', abs_repr', ‚Üêabs_map', pfunctor.map_eq'],
    conv { to_rhs, rw [Wrepr_W_mk, q.P.W_dest'_W_mk'', abs_repr', pfunctor.map_eq'] },
    congr' 2, rw [mvpfunctor.append_contents, mvpfunctor.append_contents],
    rw [append_fun, append_fun, ‚Üêsplit_fun_comp, ‚Üêsplit_fun_comp],
    reflexivity
  end,
by { rw this, apply quot.sound, apply Wrepr_equiv }

theorem fix.ind_rec {Œ≤ : fam J} (g‚ÇÅ g‚ÇÇ : fix F Œ± ‚ü∂ Œ≤)
    (h : ‚àÄ ‚¶Éi‚¶Ñ x : unit i ‚ü∂ F.obj (append1 Œ± (fix F Œ±)),
      x ‚â´ F.map (append_fun (ùüô _) g‚ÇÅ) = x ‚â´ F.map (append_fun (ùüô Œ±) g‚ÇÇ) ‚Üí
      x ‚â´ fix.mk ‚â´ g‚ÇÅ = x ‚â´ fix.mk ‚â´ g‚ÇÇ) :
  g‚ÇÅ = g‚ÇÇ :=
begin
  ext i x,
  apply quot.induction_on x, intros x,
  apply q.P.W_ind _ _ x, intros j a f' f ih,
  show g‚ÇÅ ‚ü¶q.P.W_mk a f' f‚üß = g‚ÇÇ ‚ü¶q.P.W_mk a f' f‚üß,
  rw [‚Üêfix.ind_aux a f' f],
  -- specialize h _,
  specialize h (value _ ((P F).obj (append1 Œ± (fix F Œ±))) ‚ü®a,mvpfunctor.append_contents _ f' (Œª i x, ‚ü¶f x‚üß)‚ü© ‚â´ abs _) _,
  --   simp at h, exact h },
  -- { ext, cases x_2, },
  { replace h := congr_fun (congr_fun h j) unit.rfl, simp [value] at h, exact h },
  ext _ ‚ü®‚ü®‚ü® rfl ‚ü©‚ü©‚ü©, simp only [value, mvpfunctor.append_contents, append_fun, pfunctor.then_def],
  rw [‚Üê abs_map',‚Üê abs_map',pfunctor.map_eq',pfunctor.map_eq',‚Üê split_fun_comp,‚Üê split_fun_comp],
  congr' 3, ext, apply ih,
end

theorem fix.rec_unique {Œ≤ : fam J} (g : F.obj (append1 Œ± Œ≤) ‚ü∂ Œ≤) (h : fix F Œ± ‚ü∂ Œ≤)
    (hyp : fix.mk ‚â´ h = F.map (append_fun (ùüô _) h) ‚â´ g) :
  fix.rec g = h :=
begin
  apply fix.ind_rec,
  intros X x hyp', reassoc hyp',
  rw [hyp, ‚Üêhyp', fix.rec_eq]
end

theorem fix.mk_dest : fix.dest ‚â´ fix.mk = ùüô (fix F Œ±) :=
begin
  apply fix.ind_rec,
  rw [fix.dest, fix.rec_eq_assoc, ‚Üêcategory_theory.functor.map_comp_assoc, ‚Üêappend_fun_comp, category.id_comp, category.comp_id],
  intros X f h, reassoc h,
  rw [h,append_fun_id_id, category_theory.functor.map_id, category.id_comp]
end

theorem fix.dest_mk : fix.mk ‚â´ fix.dest = ùüô (F.obj (append1 Œ± (fix F Œ±))) :=
begin
  unfold fix.dest, rw [fix.rec_eq, ‚Üêfix.dest, ‚Üêcategory_theory.functor.map_comp],
  rw [‚Üê append_fun_comp, category.id_comp],
  rw [fix.mk_dest, append_fun_id_id, category_theory.functor.map_id]
end

theorem fix.ind {Œ± : fam I} (p : fam.Pred (fix F Œ±))
    (h : ‚àÄ j (x : unit j ‚ü∂ F.obj (Œ±.append1 (fix F Œ±))), liftp (mvfunctor.pred_last Œ± p) x ‚Üí ‚àÄ a, p j (fix.mk $ x a)) :
  ‚àÄ j x, p j x :=
begin
  intros j a,
  apply quot.induction_on a, clear a,
  intro x,
  apply q.P.W_ind _ _ x, clear x j,
  intros i a f' f ih,
  change p _ ‚ü¶q.P.W_mk a f' f‚üß,
  rw [‚Üêfix.ind_aux a f' f],
  apply h i (value _ _ (abs (append1 Œ± (fix F Œ±))
          ‚ü®a,
           mvpfunctor.append_contents (P F) f' (Œª (i_1 : J) (x : (mvpfunctor.last (P F)).B i a i_1), ‚ü¶f x‚üß)‚ü©))
          _ unit.rfl,
  rw [mvqpf.liftp_iff],
  rintros k ‚ü®‚ü®rfl‚ü©‚ü©,
  refine ‚ü®a, _, rfl, _‚ü©,
  rintros (i|i) x, { triv },
  dsimp [mvfunctor.pred_last],
  apply ih
end

instance mvqpf_fix : mvqpf (pFix F) :=
{ P         := q.P.Wp,
  abs       := Œª Œ±, fix.quot.mk,
  repr      := Œª Œ±, fix_to_W,
  abs_repr  := by { intros Œ±, ext i x, apply quot.induction_on x, intro a, apply quot.sound, apply Wrepr_equiv },
  abs_map   :=
    begin
      intros Œ± Œ≤ g, conv { to_rhs, dsimp [pFix,functor.map]},
      ext i x, simp only [fix.map, pfunctor.then_def],
      apply quot.sound, apply Wequiv.refl
    end }

-- def fix.drec {Œ≤ : fix F Œ± ‚Üí Type u} (g : Œ† x : F (Œ± ::: sigma Œ≤), Œ≤ (fix.mk $ (id ::: sigma.fst) <$$> x)) (x : fix F Œ±) : Œ≤ x :=
-- let y := @fix.rec _ F _ _ Œ± (sigma Œ≤) (Œª i, ‚ü®_,g i‚ü©) x in
-- have x = y.1,
--   by { symmetry, dsimp [y], apply fix.ind_rec _ id _ x, intros x' ih,
--        rw fix.rec_eq, dsimp, simp [append_fun_id_id] at ih,
--        congr, conv { to_rhs, rw [‚Üê ih] }, rw [mvfunctor.map_map,‚Üê append_fun_comp,id_comp], },
-- cast (by rw this) y.2

end mvqpf

namespace ex
local attribute [ext] fam.ext

inductive vec_shape (Œ± : Type) (rec : ‚Ñï ‚Üí Type) : ‚Ñï ‚Üí Type
| nil : vec_shape 0
| cons {n} : Œ± ‚Üí rec n ‚Üí vec_shape (n + 1)

inductive vec_branch (Œ± : Type) :  Œ† i, vec_shape Œ± (Œª (_x : ‚Ñï), unit) i ‚Üí empty ‚äï ‚Ñï ‚Üí Type
| cons (x) {n} : vec_branch (n+1) (vec_shape.cons x ()) (sum.inr n)

def vec_shape.map (Œ± : Type) (X Y : fam (empty ‚äï ‚Ñï)) (f : X ‚ü∂ Y) : Œ† i, vec_shape Œ± (X ‚àò sum.inr) i ‚Üí vec_shape Œ± (Y ‚àò sum.inr) i
| 0 vec_shape.nil := vec_shape.nil
| (n+1) (vec_shape.cons x xs) := vec_shape.cons x (f xs)

def vec_shape' (Œ± : Type) : fam (empty ‚äï ‚Ñï) ‚•§ fam ‚Ñï :=
{ obj := Œª f, vec_shape Œ± (f ‚àò sum.inr),
  map := Œª X Y f, vec_shape.map Œ± X Y f,
  map_id' := by intros; ext _ ‚ü® ‚ü©; refl,
  map_comp' := by intros; ext _ ‚ü® ‚ü©; refl }

def vec_P (Œ± : Type) : mvpfunctor (empty ‚äï ‚Ñï) ‚Ñï :=
‚ü® vec_shape Œ± (Œª _, unit), vec_branch Œ± ‚ü©

def unit' {I : Type} : fam I :=
Œª _, unit

def abs {Œ±} (f : fam (empty ‚äï ‚Ñï)) : pfunctor.obj (vec_P Œ±) f ‚ü∂ (vec_shape' Œ±).obj f :=
Œª i x,
       match i, x : Œ† i (x : pfunctor.obj (vec_P Œ±) f i), (vec_shape' Œ±).obj f i with
       | 0, ‚ü®a,b‚ü© := vec_shape.map _ ((vec_P Œ±).B 0 a) _ b _ vec_shape.nil
       | j+1, ‚ü®a@(vec_shape.cons x ()),b‚ü© := vec_shape.map _ ((vec_P Œ±).B _ a) _ b _ (vec_shape.cons x $ @vec_branch.cons _ x j)
       end

def repr {Œ±} (f : fam (empty ‚äï ‚Ñï)) : (vec_shape' Œ±).obj f ‚ü∂ pfunctor.obj (vec_P Œ±) f :=
Œª i x, (‚ü®vec_shape.map Œ± f unit' (Œª _ _, ()) i x, Œª a b,
  match i, x, b with
  | nat.succ j, (vec_shape.cons a_1 a_2), b :=
    match a, b : Œ† a, vec_branch Œ± (nat.succ j) (vec_shape.cons a_1 ()) a ‚Üí f a with
    | sum.inr _, vec_branch.cons x := a_2
    end
  end ‚ü© : pfunctor.obj (vec_P Œ±) f i)

instance {Œ±} : mvqpf (vec_shape' Œ±) :=
{ P := vec_P Œ±,
  abs := abs,
  repr := repr,
  abs_repr := by { intros, ext, cases x; refl },
  abs_map := by { intros, ext, cases x; cases i; [refl, rcases x_fst with _|‚ü®_,_,‚ü®‚ü® ‚ü©‚ü©‚ü©]; refl }, }

def vec_t (Œ± : Type) := mvqpf.pFix (vec_shape' Œ±)
def vec (Œ± : Type) (i : ‚Ñï) : Type := (vec_t Œ±).obj empty.elim i

open nat

def vec.nil {Œ±} : vec Œ± 0 := mvqpf.fix.mk vec_shape.nil
def vec.cons {Œ±} {n} (x : Œ±) (xs : vec Œ± n) : vec Œ± (succ n) := mvqpf.fix.mk (vec_shape.cons x xs)

def prod (Œ±) (Œ≤ : ‚Ñï ‚Üí Type) (n : ‚Ñï) := vec Œ± n √ó Œ≤ n

def rec' {Œ±} {Œ≤ : ‚Ñï ‚Üí Type} (f : Œ≤ 0) (f' : Œ† {n} (x : Œ±) (xs : vec Œ± n), Œ≤ n ‚Üí Œ≤ (n+1)) :
  Œ† n, vec Œ± n ‚Üí prod Œ± Œ≤ n :=
mvqpf.fix.rec (Œª n (x : vec_shape Œ± (prod Œ± Œ≤) n),
  match n, x with
  | 0, vec_shape.nil := (vec.nil,f)
  | n+1, vec_shape.cons x xs := (vec.cons x xs.1, f' x xs.1 xs.2)
  end )

def rec {Œ±} {Œ≤ : ‚Ñï ‚Üí Type} (f : Œ≤ 0) (f' : Œ† {n} (x : Œ±) (xs : vec Œ± n), Œ≤ n ‚Üí Œ≤ (n+1))
  (n) (v : vec Œ± n) : Œ≤ n :=
(rec' f @f' n v).2

def ind {Œ±} {Œ≤ : Œ† n, vec Œ± n ‚Üí Prop} (f : Œ≤ 0 vec.nil) (f' : Œ† {n} (x : Œ±) (xs : vec Œ± n), Œ≤ n xs ‚Üí Œ≤ (n+1) (vec.cons x xs))
  (n) (v : vec Œ± n) : Œ≤ n v :=
mvqpf.fix.ind _ (Œª i a b ‚ü® ‚ü©,
begin
  clear _x _fun_match,
  cases hh : a fam.unit.rfl, apply f, apply f',
  cases b, replace b_h := congr_fun (congr_fun b_h _) fam.unit.rfl,
  dsimp at b_h,
  cases b_w fam.unit.rfl,
  dsimp [vec_shape',vec_shape.map,fam.subtype.val,subtype.val] at b_h,
  cases a_4, dsimp [mvfunctor.pred_last] at a_4_property,
  have := eq.trans b_h hh,
  cases this, exact a_4_property,
end) _ v

end ex

namespace ex_mutual

def pair (Œ±) (Œ≤) : bool ‚Üí Type
| tt := Œ±
| ff := Œ≤

def pair.map {X X' Y Y'} (f : X ‚Üí Y) (g : X' ‚Üí Y') : pair X X' ‚ü∂ pair Y Y' :=
Œª b,
  match b : Œ† b : bool, pair X X' b ‚ü∂ pair Y Y' b with
  | tt := f
  | ff := g
  end

inductive child_shape (f : empty ‚äï bool ‚Üí Type) : Type
| nil : child_shape
| cons : f (sum.inr tt) ‚Üí f (sum.inr ff) ‚Üí child_shape

def child_shape.map {X Y : fam $ empty ‚äï bool} (f : X ‚ü∂ Y) : child_shape X ‚Üí child_shape Y
| child_shape.nil := child_shape.nil
| (child_shape.cons t xs) := child_shape.cons (f t) (f xs)

inductive tree_shape (Œ± : Type) (f : empty ‚äï bool ‚Üí Type) : Type
| node : Œ± ‚Üí f (sum.inr ff) ‚Üí tree_shape

def tree_shape.map {Œ±} {X Y : fam $ empty ‚äï bool} (f : X ‚ü∂ Y) : tree_shape Œ± X ‚Üí tree_shape Œ± Y
| (tree_shape.node x xs) := tree_shape.node x (f xs)

def mut_shape (Œ± : Type) (f : fam $ empty ‚äï bool) : fam bool :=
pair (tree_shape Œ± f) (child_shape f)

def mut_shape.map (Œ± : Type) (X Y : fam $ empty ‚äï bool) (f : X ‚ü∂ Y) : mut_shape Œ± X ‚ü∂ mut_shape Œ± Y :=
pair.map (tree_shape.map f) (child_shape.map f)

def mut_shape' (Œ± : Type) : fam (empty ‚äï bool) ‚•§ fam bool :=
{ obj := mut_shape Œ±,
  map := mut_shape.map Œ±,
  map_id' := by intros; ext ‚ü® ‚ü© ‚ü® ‚ü©; [refl, refl, skip]; ext ‚ü® ‚ü©; refl,
  map_comp' := by intros; ext ‚ü® ‚ü© ‚ü® ‚ü©; [refl, refl, skip]; ext ‚ü® ‚ü©; refl }

inductive mut_children' (Œ± : Type) : Œ† (i : bool), pair Œ± bool i ‚Üí fam (empty ‚äï bool)
-- | list_nil : mut_children ff ff _
| list_obj : mut_children' ff ff (sum.inr tt)
| list_tail : mut_children' ff ff (sum.inr ff)
| child : mut_children' ff ff (sum.inr ff)

-- def mut_children (Œ± : Type) : Œ† (i : bool), pair Œ± bool i ‚Üí fam (empty ‚äï bool)
-- | tt x := _
-- | ff tt := _
-- | ff ff := _

def mut_P (Œ± : Type) : mvpfunctor (empty ‚äï bool) bool :=
{ A := pair Œ± bool,
  B := mut_children Œ± }

def mut_P.abs {Œ±} : Œ† (X : fam (empty ‚äï bool)), pfunctor.obj (mut_P Œ±) X ‚ü∂ (mut_shape' Œ±).obj X
| X tt := _
| X ff := _

def mut_P.repr {Œ±} : Œ† (X : fam (empty ‚äï bool)), (mut_shape' Œ±).obj X ‚ü∂ pfunctor.obj (mut_P Œ±) X
| X tt := _
| X ff := _

instance {Œ±} : mvqpf (mut_shape' Œ±) :=
{ P := mut_P Œ±,
  abs := mut_P.abs,
  repr := mut_P.repr,
  abs_repr := _,
  abs_map := _ }

end ex_mutual
