/-
Copyright (c) 2018 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Jeremy Avigad

The initial algebra of a multivariate qpf is again a qpf.
-/
import ..mvpfunctor.W .basic
universes u v

namespace mvqpf

open pfunctor (liftp liftr) category_theory

variables {I J : Type u} {F : fam (I ‚äï J) ‚•§ fam J} [q : mvqpf F] {Œ± : fam I} {Œ≤ : fam J}
include q

/-- does recursion on `q.P.W` using `g : F Œ± ‚Üí Œ±` rather than `g : P Œ± ‚Üí Œ±` -/
def recF (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤) : q.P.W Œ± ‚ü∂ Œ≤ :=
q.P.W_ind (Œª j a f' f rec,
  g (abs F _ ‚ü®a,fam.split_fun f' rec‚ü©))

theorem recF_eq (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤)
    {i} (a : q.P.A i) (f' : q.P.drop.B i a ‚ü∂ Œ±) (f : q.P.last.B i a ‚ü∂ q.P.W Œ±) :
  recF g (q.P.W_mk a f' f) =  g (abs F _ ‚ü®a, fam.split_fun f' (f ‚â´ recF g)‚ü©) :=
by simp [recF]; rw [mvpfunctor.W_ind_eq]; refl

theorem recF_eq' (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤) :
  -- recF g x = g (abs F _ ((P F).map (fam.append_fun (ùüô _) (recF g)) (q.P.W_dest' x))) :=
  recF g = q.P.W_dest' ‚â´ q.P.map (fam.append_fun (ùüô _) (recF g)) ‚â´ abs F _ ‚â´ g :=
begin
  ext i x : 2,
  apply q.P.W_cases _ _ x,
  intros j a f' f, erw [recF_eq], apply congr_arg (@g _),
  erw [pfunctor.map_eq,mvfunctor.append_fun_comp_split_fun], congr,
  ext : 2, dsimp, rw mvpfunctor.W_path_dest_right_W_path_cases_on, cases f x_2; refl,
end

inductive Wequiv : Œ† {i}, q.P.W Œ± i ‚Üí q.P.W Œ± i ‚Üí Prop
| ind {i} (a : q.P.A i) (f' : q.P.drop.B i a ‚ü∂ Œ±) (f‚ÇÄ f‚ÇÅ : q.P.last.B i a ‚ü∂ q.P.W Œ±) :
    (‚àÄ j (x : q.P.last.B i a j), Wequiv ((f‚ÇÄ : Œ† j, q.P.last.B i a j ‚Üí q.P.W Œ± j) x) (f‚ÇÅ x)) ‚Üí Wequiv (q.P.W_mk a f' f‚ÇÄ) (q.P.W_mk a f' f‚ÇÅ)
| abs {i} (a‚ÇÄ : q.P.A i) (f'‚ÇÄ : q.P.drop.B i a‚ÇÄ ‚ü∂ Œ±) (f‚ÇÄ : q.P.last.B i a‚ÇÄ ‚ü∂ q.P.W Œ±)
          (a‚ÇÅ : q.P.A i) (f'‚ÇÅ : q.P.drop.B i a‚ÇÅ ‚ü∂ Œ±) (f‚ÇÅ : q.P.last.B i a‚ÇÅ ‚ü∂ q.P.W Œ±) :
      abs F _ ‚ü®a‚ÇÄ, q.P.append_contents f'‚ÇÄ f‚ÇÄ‚ü© = abs F _ ‚ü®a‚ÇÅ, q.P.append_contents f'‚ÇÅ f‚ÇÅ‚ü© ‚Üí
        Wequiv (q.P.W_mk a‚ÇÄ f'‚ÇÄ f‚ÇÄ) (q.P.W_mk a‚ÇÅ f'‚ÇÅ f‚ÇÅ)
| trans {i} (u v w : q.P.W Œ± i) : Wequiv u v ‚Üí Wequiv v w ‚Üí Wequiv u w

open fam

theorem recF_eq_of_Wequiv (Œ± : fam I) {Œ≤ : fam J} (u : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤)
    ‚¶Éi‚¶Ñ (x y : q.P.W Œ± i) :
  Wequiv x y ‚Üí recF u x = recF u y :=
begin
  revert i x, refine q.P.W_cases _ ,
  intros i a‚ÇÄ f'‚ÇÄ f‚ÇÄ y,
  revert i y, refine q.P.W_cases _,
  intros i a‚ÇÅ f'‚ÇÅ f‚ÇÅ, introv,
  intro h, induction h,
  case mvqpf.Wequiv.ind : j a f' f‚ÇÄ f‚ÇÅ h ih
  { have : f‚ÇÄ ‚â´ recF u = f‚ÇÅ ‚â´ recF u, { ext : 2, simp [ih] },
    simp only [recF_eq, this, ih, fam.split_fun_comp] },
  case mvqpf.Wequiv.abs : j a‚ÇÄ f'‚ÇÄ f‚ÇÄ a‚ÇÅ f'‚ÇÅ f‚ÇÅ h ih
    { rw [recF_eq'], simp [abs_map_assoc,mvpfunctor.W_dest'_W_mk,h] },
  case mvqpf.Wequiv.trans : i x y z e‚ÇÅ e‚ÇÇ ih‚ÇÅ ih‚ÇÇ
    { exact eq.trans ih‚ÇÅ ih‚ÇÇ }
end

theorem Wequiv.abs' ‚¶Éi‚¶Ñ (x y : q.P.W Œ± i)
    (h : abs F _ (q.P.W_dest' x) = abs F _ (q.P.W_dest' y)) :
  Wequiv x y :=
begin
  revert i x h, refine q.P.W_cases _,
  intros i a‚ÇÄ f'‚ÇÄ f‚ÇÄ y,
  revert i y, refine q.P.W_cases _,
  intros i a‚ÇÅ f'‚ÇÅ f‚ÇÅ, introv,
  apply Wequiv.abs
end

theorem Wequiv.refl ‚¶Éi‚¶Ñ (x : q.P.W Œ± i) : Wequiv x x :=
by apply q.P.W_cases _ _ x; intros i a f' f; exact Wequiv.abs a f' f a f' f rfl

theorem Wequiv.symm ‚¶Éi‚¶Ñ (x y : q.P.W Œ± i) : Wequiv x y ‚Üí Wequiv y x :=
begin
  intro h, induction h,
  case mvqpf.Wequiv.ind : i a f' f‚ÇÄ f‚ÇÅ h ih
    { exact Wequiv.ind _ _ _ _ ih },
  case mvqpf.Wequiv.abs : i a‚ÇÄ f'‚ÇÄ f‚ÇÄ a‚ÇÅ f'‚ÇÅ f‚ÇÅ h ih
    { exact Wequiv.abs _ _ _ _ _ _ h.symm },
  case mvqpf.Wequiv.trans : i x y z e‚ÇÅ e‚ÇÇ ih‚ÇÅ ih‚ÇÇ
    { exact mvqpf.Wequiv.trans _ _ _ ih‚ÇÇ ih‚ÇÅ}
end

/-- maps every element of the W type to a canonical representative -/
def Wrepr : q.P.W Œ± ‚ü∂ q.P.W Œ± := recF (repr _ _ ‚â´ q.P.W_mk')

theorem Wrepr_W_mk  ‚¶Éi‚¶Ñ
    (a : q.P.A i) (f' : q.P.drop.B i a ‚ü∂ Œ±) (f : q.P.last.B i a ‚ü∂ q.P.W Œ±) :
  q.P.W_mk' ‚â´ Wrepr =
     q.P.map (fam.append_fun (ùüô _) Wrepr) ‚â´ abs F _ ‚â´ repr F (Œ±.append1 _) ‚â´ q.P.W_mk' :=
by rw [Wrepr,recF]; simp

theorem Wrepr_W_mk'  ‚¶Éi‚¶Ñ
    (a : q.P.A i) (f' : q.P.drop.B i a ‚ü∂ Œ±) (f : q.P.last.B i a ‚ü∂ q.P.W Œ±) :
  Wrepr (q.P.W_mk a f' f) =
    q.P.W_mk' (repr F _ (abs F _ (q.P.map (fam.append_fun (ùüô _) Wrepr) ‚ü®a, q.P.append_contents f' f‚ü©))) :=
by rw [Wrepr, pfunctor.map_eq, recF_eq', mvpfunctor.W_dest'_W_mk]; refl

theorem Wrepr_equiv ‚¶Éi‚¶Ñ (x : q.P.W Œ± i) : Wequiv (Wrepr x) x :=
begin
  apply q.P.W_ind _ _ x, intros i a f' f ih,
  apply Wequiv.trans _ (q.P.W_mk' (q.P.map (fam.append_fun (ùüô _) Wrepr) ‚ü®a, q.P.append_contents f' f‚ü©)),
  { apply Wequiv.abs',
    rw [Wrepr_W_mk, q.P.W_dest'_W_mk', q.P.W_dest'_W_mk', abs_repr'] },
  erw [q.P.map_eq, mvpfunctor.W_mk', mvfunctor.append_fun_comp_split_fun, category.comp_id],
  apply Wequiv.ind, exact ih
end

theorem Wequiv_map {Œ± Œ≤ : fam I} (g : Œ± ‚ü∂ Œ≤) ‚¶Éi‚¶Ñ (x y : q.P.W Œ± i) :
  Wequiv x y ‚Üí Wequiv (q.P.W_map g x) (q.P.W_map g y) :=
begin
  intro h, induction h,
  case mvqpf.Wequiv.ind : i a f' f‚ÇÄ f‚ÇÅ h ih
    { erw [q.P.W_map_W_mk, q.P.W_map_W_mk], apply Wequiv.ind, apply ih },
  case mvqpf.Wequiv.abs : j a‚ÇÄ f'‚ÇÄ f‚ÇÄ a‚ÇÅ f'‚ÇÅ f‚ÇÅ h ih
    { rw [q.P.W_map_W_mk, q.P.W_map_W_mk], apply Wequiv.abs,
      rw [mvpfunctor.append_contents_comp, mvpfunctor.append_contents_comp, ‚Üê pfunctor.map_eq, ‚Üê pfunctor.map_eq, abs_map', abs_map', h]},
  case mvqpf.Wequiv.trans : i x y z e‚ÇÅ e‚ÇÇ ih‚ÇÅ ih‚ÇÇ
    { apply mvqpf.Wequiv.trans, apply ih‚ÇÅ, apply ih‚ÇÇ }
end

/-
Define the fixed point as the quotient of trees under the equivalence relation.
-/

def W_setoid (Œ± : fam I) (i) : setoid (q.P.W Œ± i) :=
‚ü®Wequiv, @Wequiv.refl _ _ _ _ _ _, @Wequiv.symm _ _ _ _ _ _, @Wequiv.trans _ _ _ _ _ _‚ü©

local attribute [instance] W_setoid

def fix (F : fam (I‚äïJ) ‚•§ fam J) [q : mvqpf F] (Œ± : fam I) : fam J
| i := quotient (W_setoid Œ± i : setoid (q.P.W Œ± i))

def fix.map {Œ± Œ≤ : fam I} : Œ† (g : Œ± ‚ü∂ Œ≤), fix F Œ± ‚ü∂ fix F Œ≤
| g i :=
quotient.lift (Œª x : q.P.W Œ± i, ‚ü¶q.P.W_map g x‚üß)
  (Œª a b h, quot.sound (Wequiv_map _ _ _ h))

def pFix : fam I ‚•§ fam J :=
{ obj := fix F,
  map := Œª X Y f, fix.map f }

def Wequiv' : fam.Pred (q.P.W Œ± ‚äó q.P.W Œ±) :=
Œª i x, Wequiv x.1 x.2

def pEq : fam.Pred (Œ± ‚äó Œ±) :=
Œª i x, x.1 = x.2

def fix.lift (f : q.P.W Œ± ‚ü∂ Œ≤) (h : ‚àÄ {i} a b : q.P.W Œ± i, Wequiv a b ‚Üí f a = f b) : (fix F Œ± ‚ü∂ Œ≤) :=
Œª i x, quot.lift (@f i) h x

-- TODO: should this be quotient.lift?
def fix.rec (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤) : fix F Œ± ‚ü∂ Œ≤ :=
fix.lift (recF g) (recF_eq_of_Wequiv Œ± g)

def fix_to_W : fix F Œ± ‚ü∂ q.P.W Œ± :=
fix.lift Wrepr (recF_eq_of_Wequiv Œ± (Œª i x, q.P.W_mk' (repr _ _ x)))

def fix.quot.mk (f : Œ≤ ‚ü∂ q.P.W Œ±) : Œ≤ ‚ü∂ fix F Œ± :=
Œª i x, quot.mk _ (f x)

@[simp]
lemma fix.quot.mk_lift {Œ≥ : fam J} (f : Œ≤ ‚ü∂ q.P.W Œ±) (g : q.P.W Œ± ‚ü∂ Œ≥)
      (h : ‚àÄ ‚¶Éi : J‚¶Ñ (a b : mvpfunctor.W (P F) Œ± i), Wequiv a b ‚Üí g a = g b) :
  fix.quot.mk f ‚â´ fix.lift g h = f ‚â´ g :=
by ext; simp [fix.lift,fix.quot.mk]

def fix.mk : F.obj (Œ±.append1 (fix F Œ±)) ‚ü∂ fix F Œ± :=
fix.quot.mk (repr _ _ ‚â´ q.P.map (fam.append_fun (ùüô _) fix_to_W) ‚â´ q.P.W_mk')

def fix.dest : fix F Œ± ‚ü∂ F.obj (Œ±.append1 (fix F Œ±)) :=
fix.rec (F.map $ fam.append_fun (ùüô _) fix.mk)

#check mvpfunctor.W_mk'

theorem fix.rec_eq (g : F.obj (Œ±.append1 Œ≤) ‚ü∂ Œ≤) : -- ‚¶Éi‚¶Ñ (x : F.obj (Œ±.append1 (fix F Œ±)) i) :
  fix.mk ‚â´ fix.rec g = F.map (fam.append_fun (ùüô _) (fix.rec g)) ‚â´ g :=
-- have recF g ‚àò fix_to_W = fix.rec g,
--   by { apply funext, apply quotient.ind, intro x, apply recF_eq_of_Wequiv,
--        apply Wrepr_equiv },
begin
  -- have : q.P.W_mk' ‚â´ recF g = ùüô _, admit,
  conv { to_lhs, rw [fix.rec,fix.mk] },
  simp, rw [recF_eq', abs_map_assoc, mvpfunctor.W_dest'_W_mk'_assoc, abs_map_assoc, abs_repr_assoc, ‚Üê category_theory.functor.map_comp],
  -- cases h : repr _ _ x with a f,
  -- erw h,
  -- done,
  erw [pfunctor.map_eq, recF_eq', ‚Üêmvpfunctor.map_eq, mvpfunctor.W_dest'_W_mk'],
  rw [‚Üêmvpfunctor.comp_map, abs_map, ‚Üêh, abs_repr, ‚Üêappend_fun_comp, id_comp, this]
end
#check recF_eq'
theorem fix.ind_aux (a : q.P.A) (f' : q.P.drop.B a ‚üπ Œ±) (f : q.P.last.B a ‚Üí q.P.W Œ±) :
  fix.mk (abs ‚ü®a, q.P.append_contents f' (Œª x, ‚ü¶f x‚üß)‚ü©) = ‚ü¶q.P.W_mk a f' f‚üß :=
have fix.mk (abs ‚ü®a, q.P.append_contents f' (Œª x, ‚ü¶f x‚üß)‚ü©) = ‚ü¶Wrepr (q.P.W_mk a f' f)‚üß,
  begin
    apply quot.sound, apply Wequiv.abs',
    rw [mvpfunctor.W_dest'_W_mk', abs_map, abs_repr, ‚Üêabs_map, mvpfunctor.map_eq],
    conv { to_rhs, rw [Wrepr_W_mk, q.P.W_dest'_W_mk', abs_repr, mvpfunctor.map_eq] },
    congr' 2, rw [mvpfunctor.append_contents, mvpfunctor.append_contents],
    rw [append_fun, append_fun, ‚Üêsplit_fun_comp, ‚Üêsplit_fun_comp],
    reflexivity
  end,
by { rw this, apply quot.sound, apply Wrepr_equiv }

theorem fix.ind_rec {Œ≤ : Type*} (g‚ÇÅ g‚ÇÇ : fix F Œ± ‚Üí Œ≤)
    (h : ‚àÄ x : F (append1 Œ± (fix F Œ±)),
      (append_fun id g‚ÇÅ) <$$> x = (append_fun id g‚ÇÇ) <$$> x ‚Üí g‚ÇÅ (fix.mk x) = g‚ÇÇ (fix.mk x)) :
  ‚àÄ x, g‚ÇÅ x = g‚ÇÇ x :=
begin
  apply quot.ind,
  intro x,
  apply q.P.W_ind _ x, intros a f' f ih,
  show g‚ÇÅ ‚ü¶q.P.W_mk a f' f‚üß = g‚ÇÇ ‚ü¶q.P.W_mk a f' f‚üß,
  rw [‚Üêfix.ind_aux a f' f], apply h,
  rw [‚Üêabs_map, ‚Üêabs_map, mvpfunctor.map_eq, mvpfunctor.map_eq],
  congr' 2,
  rw [mvpfunctor.append_contents, append_fun, append_fun, ‚Üêsplit_fun_comp, ‚Üêsplit_fun_comp],
  have : g‚ÇÅ ‚àò (Œª x, ‚ü¶f x‚üß) = g‚ÇÇ ‚àò (Œª x, ‚ü¶f x‚üß),
  { ext x, exact ih x },
  rw this
end

theorem fix.rec_unique {Œ≤ : Type*} (g : F (append1 Œ± Œ≤) ‚Üí Œ≤) (h : fix F Œ± ‚Üí Œ≤)
    (hyp : ‚àÄ x, h (fix.mk x) = g (append_fun id h <$$> x)) :
  fix.rec g = h :=
begin
  ext x,
  apply fix.ind_rec,
  intros x hyp',
  rw [hyp, ‚Üêhyp', fix.rec_eq]
end

theorem fix.mk_dest (x : fix F Œ±) : fix.mk (fix.dest x) = x :=
begin
  change (fix.mk ‚àò fix.dest) x = x,
  apply fix.ind_rec,
  intro x, dsimp,
  rw [fix.dest, fix.rec_eq, ‚Üêcomp_map, ‚Üêappend_fun_comp, id_comp],
  intro h, rw h,
  show fix.mk (append_fun id id <$$> x) = fix.mk x,
  rw [append_fun_id_id, id_map]
end

theorem fix.dest_mk (x : F (append1 Œ± (fix F Œ±))) : fix.dest (fix.mk x) = x :=
begin
  unfold fix.dest, rw [fix.rec_eq, ‚Üêfix.dest, ‚Üêcomp_map],
  conv { to_rhs, rw ‚Üê(id_map x) },
  rw [‚Üêappend_fun_comp, id_comp],
  have : fix.mk ‚àò fix.dest = id, {ext x, apply fix.mk_dest },
  rw [this, append_fun_id_id]
end

theorem fix.ind {Œ± : typevec n} (p : fix F Œ± ‚Üí Prop)
    (h : ‚àÄ x : F (Œ±.append1 (fix F Œ±)), liftp (pred_last Œ± p) x ‚Üí p (fix.mk x)) :
  ‚àÄ x, p x :=
begin
  apply quot.ind,
  intro x,
  apply q.P.W_ind _ x, intros a f' f ih,
  change p ‚ü¶q.P.W_mk a f' f‚üß,
  rw [‚Üêfix.ind_aux a f' f],
  apply h,
  rw mvqpf.liftp_iff,
  refine ‚ü®_, _, rfl, _‚ü©,
  intros i j,
  cases i, { triv },
  apply ih
end

instance mvqpf_fix : mvqpf (fix F) :=
{ P         := q.P.Wp,
  abs       := Œª Œ±, quot.mk Wequiv,
  repr'     := Œª Œ±, fix_to_W,
  abs_repr' := by { intros Œ±, apply quot.ind, intro a, apply quot.sound, apply Wrepr_equiv },
  abs_map   :=
    begin
      intros Œ± Œ≤ g x, conv { to_rhs, dsimp [mvfunctor.map]},
      rw fix.map, apply quot.sound,
      apply Wequiv.refl
    end }

def fix.drec {Œ≤ : fix F Œ± ‚Üí Type u} (g : Œ† x : F (Œ± ::: sigma Œ≤), Œ≤ (fix.mk $ (id ::: sigma.fst) <$$> x)) (x : fix F Œ±) : Œ≤ x :=
let y := @fix.rec _ F _ _ Œ± (sigma Œ≤) (Œª i, ‚ü®_,g i‚ü©) x in
have x = y.1,
  by { symmetry, dsimp [y], apply fix.ind_rec _ id _ x, intros x' ih,
       rw fix.rec_eq, dsimp, simp [append_fun_id_id] at ih,
       congr, conv { to_rhs, rw [‚Üê ih] }, rw [mvfunctor.map_map,‚Üê append_fun_comp,id_comp], },
cast (by rw this) y.2

end mvqpf
