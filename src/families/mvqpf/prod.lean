
import families.mvpfunctor.basic
import families.mvqpf.basic

import category_theory.products

universes u

namespace mvfunctor

variables {I I' J J' : Type u}
  (F : fam I  ‚•§ fam J )
  (G : fam I' ‚•§ fam J')

def prod.fst (X : fam (I ‚äï I')) : fam I
| i := X $ sum.inl i

def prod.snd (X : fam (I ‚äï I')) : fam I'
| i := X $ sum.inr i

protected def prod.obj (X : fam (I ‚äï I')) : fam (J ‚äï J')
| (sum.inl j) := F.obj (prod.fst X) j
| (sum.inr j) := G.obj (prod.snd X) j

protected def prod.map.fst ‚¶ÉX Y : fam (I ‚äï I')‚¶Ñ : (X ‚ü∂ Y) ‚Üí (prod.fst X ‚ü∂ prod.fst Y)
| f i x := f x

protected def prod.map.snd ‚¶ÉX Y : fam (I ‚äï I')‚¶Ñ : (X ‚ü∂ Y) ‚Üí (prod.snd X ‚ü∂ prod.snd Y)
| f i x := f x

protected def prod.map ‚¶ÉX Y : fam (I ‚äï I')‚¶Ñ : (X ‚ü∂ Y) ‚Üí (prod.obj F G X ‚ü∂ prod.obj F G Y)
| f (sum.inl j) := Œª x, F.map (map.fst f) x
| f (sum.inr j) := Œª x, G.map (map.snd f) x
-- | f (sum.inr j) := Œª x, G.map (Œª i y, f ‚Äπ _ ‚Ä∫) x

protected def prod.map' ‚¶ÉX Y : fam (I ‚äï I')‚¶Ñ :
  (prod.fst X ‚ü∂ prod.fst Y) ‚Üí (prod.snd X ‚ü∂ prod.snd Y) ‚Üí (X ‚ü∂ Y)
| f g (sum.inl i) x := f x
| f g (sum.inr i) x := g x

@[simp] lemma prod.map.fst_id ‚¶ÉX : fam (I ‚äï I')‚¶Ñ : map.fst (ùüô X) = ùüô _ := by ext; refl

@[simp] lemma prod.map.snd_id ‚¶ÉX : fam (I ‚äï I')‚¶Ñ : map.snd (ùüô X) = ùüô _ := by ext; refl

@[simp] lemma prod.map.fst_comp ‚¶ÉX Y Z : fam (I ‚äï I')‚¶Ñ (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  map.fst (f ‚â´ g) = map.fst f ‚â´ map.fst g := by ext; refl

@[simp] lemma prod.map.snd_comp ‚¶ÉX Y Z : fam (I ‚äï I')‚¶Ñ (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  map.snd (f ‚â´ g) = map.snd f ‚â´ map.snd g := by ext; refl

def prod : fam (I ‚äï I') ‚•§ fam (J ‚äï J') :=
{ obj := prod.obj F G,
  map := prod.map F G,
  map_id' := by { intros, ext ‚ü® ‚ü© ‚ü® ‚ü©; simp [prod.map,prod.obj]; refl },
  map_comp' := by { intros, ext ‚ü® ‚ü© ‚ü® ‚ü©; simp [prod.map,- pfunctor.then_def]; refl } }

def prod_obj (X : fam I) (Y : fam I') : fam (I ‚äï I')
| (sum.inl i) := X i
| (sum.inr i) := Y i

def prod_mk : Œ† X : fam (I ‚äï I'), prod_obj (F.obj $ prod.fst X) (G.obj $ prod.snd X) ‚ü∂ (prod F G).obj X
| X (sum.inl j) x := x
| X (sum.inr j) x := x

def prod_get : Œ† X : fam (I ‚äï I'), (prod F G).obj X ‚ü∂ prod_obj (F.obj $ prod.fst X) (G.obj $ prod.snd X)
| X (sum.inl j) x := x
| X (sum.inr j) x := x

def prod_map {X X' : fam I} {Y Y' : fam I'} : Œ† (f : X ‚ü∂ X') (g : Y ‚ü∂ Y'), prod_obj X Y ‚ü∂ prod_obj X' Y'
| f g (sum.inl j) x := f x
| f g (sum.inr j) x := g x

@[simp,reassoc]
lemma prod_mk_get {X : fam (I ‚äï I')} :
  prod_mk F G X ‚â´ prod_get F G X = ùüô _ :=
by ext1 ‚ü® ‚ü©; refl

@[simp,reassoc]
lemma prod_get_mk {X : fam (I ‚äï I')} :
  prod_get F G X ‚â´ prod_mk F G X = ùüô _ :=
by ext1 ‚ü® ‚ü©; refl

@[simp]
lemma prod_map_id {X : fam I} {X' : fam I'} :
  mvfunctor.prod_map (ùüô X) (ùüô X') = ùüô _ :=
by ext1 ‚ü® ‚ü©; refl

@[simp,reassoc]
lemma prod_map_comp_map {X Y Z : fam I} {X' Y' Z' : fam I'} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (f' : X' ‚ü∂ Y') (g' : Y' ‚ü∂ Z') :
  mvfunctor.prod_map f f' ‚â´ mvfunctor.prod_map g g' = mvfunctor.prod_map (f ‚â´ g) (f' ‚â´ g') :=
by ext1 ‚ü® ‚ü©; refl

@[simp,reassoc]
lemma prod_mk_nat {X Y : fam (I‚äïI')}
  (f : X ‚ü∂ Y)  :
  prod_mk F G _ ‚â´ (prod F G).map f =
  mvfunctor.prod_map (F.map $ mvfunctor.prod.map.fst f) (G.map $ mvfunctor.prod.map.snd f) ‚â´ prod_mk F G _ :=
by ext1 ‚ü® ‚ü©; refl

end mvfunctor

namespace pfunctor

variables {I I' J J' : Type u}
  (F : pfunctor I  J)
  (G : pfunctor I' J')

def boo : Œ† (i : J ‚äï J'), sum.elim (F.A) (G.A) i ‚Üí fam (I ‚äï I')
| (sum.inl i) x (sum.inl j) := F.B i x j
| (sum.inr i) x (sum.inr j) := G.B i x j
| _ _ _ := pempty

open mvfunctor (prod_obj prod.fst prod.snd)

def fst_boo {X : fam I} : Œ† (i : J') (x : (G.A) i),
  mvfunctor.prod.fst (boo F G (sum.inr i) x) ‚ü∂ X .

def snd_boo {X : fam I'} : Œ† (i : J) (x : (F.A) i),
  mvfunctor.prod.snd (boo F G (sum.inl i) x) ‚ü∂ X .

def prod : pfunctor (I ‚äï I') (J ‚äï J') :=
‚ü® sum.elim F.A G.A, boo F G ‚ü©

def prod_mk : Œ† X : fam (I ‚äï I'), prod_obj (F.obj $ mvfunctor.prod.fst X) (G.obj $ mvfunctor.prod.snd X) ‚ü∂ (prod F G).obj X
| X (sum.inl j) ‚ü®x,f‚ü© := ‚ü®x,mvfunctor.prod.map' f (snd_boo F G _ _)‚ü©
| X (sum.inr j) ‚ü®x,f‚ü© := ‚ü®x,mvfunctor.prod.map' (fst_boo F G _ _) f‚ü©

def prod_get : Œ† X : fam (I ‚äï I'), (prod F G).obj X ‚ü∂ prod_obj (F.obj $ mvfunctor.prod.fst X) (G.obj $ mvfunctor.prod.snd X)
| X (sum.inl j) x := ‚ü®x.1,mvfunctor.prod.map.fst x.2‚ü©
| X (sum.inr j) x := ‚ü®x.1,mvfunctor.prod.map.snd x.2‚ü©

@[simp,reassoc]
lemma prod_mk_get {X : fam (I ‚äï I')} :
  prod_mk F G X ‚â´ prod_get F G X = ùüô _ :=
by { ext1 ‚ü® ‚ü©, ext ‚ü®_,_ ‚ü©; intros, refl, cases a, simp, ext _ ‚ü® ‚ü©, dsimp [prod_get,prod_mk,mvfunctor.prod.map.fst,mvfunctor.prod.map'], ext, refl,
     ext ‚ü® ‚ü©, refl, rintros ‚ü® ‚ü©, dsimp [prod_get,prod_mk,mvfunctor.prod.map.fst,mvfunctor.prod.map'], ext, refl, rintros _ _ ‚ü® ‚ü©,
     simp, dsimp [prod_get,prod_mk,mvfunctor.prod.map.fst,mvfunctor.prod.map'], ext, refl }

@[simp,reassoc]
lemma prod_get_mk {X : fam (I ‚äï I')} :
  prod_get F G X ‚â´ prod_mk F G X = ùüô _ :=
by { ext1 ‚ü® ‚ü©; ext1 ‚ü®_,_ ‚ü©, dsimp [prod_mk,prod_get,mvfunctor.prod.map',mvfunctor.prod.map.fst],
     refine congr_arg _ _, ext ‚ü® ‚ü© : 2, refl, ext ‚ü® ‚ü©, ext ‚ü® ‚ü© ‚ü® ‚ü©, refl, rintro ‚ü® ‚ü©, simp, ext1 ‚ü® ‚ü©, ext1 ‚ü® ‚ü©,
     dsimp [prod_get,prod_mk,mvfunctor.prod.map.snd], ext, refl, }

@[simp]
lemma prod_map_id {X : fam I} {X' : fam I'} :
  mvfunctor.prod_map (ùüô X) (ùüô X') = ùüô _ :=
by ext ‚ü® ‚ü©; refl

@[simp,reassoc]
lemma prod_map_comp_map {X Y Z : fam I} {X' Y' Z' : fam I'} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (f' : X' ‚ü∂ Y') (g' : Y' ‚ü∂ Z') :
  mvfunctor.prod_map f f' ‚â´ mvfunctor.prod_map g g' = mvfunctor.prod_map (f ‚â´ g) (f' ‚â´ g') :=
by ext ‚ü® ‚ü©; refl

@[simp,reassoc]
lemma prod_get_nat {X Y : fam (I‚äïI')} (f : X ‚ü∂ Y) :
  (prod F G).map f ‚â´ prod_get F G _ =
  prod_get F G _ ‚â´ mvfunctor.prod_map (F.map $ mvfunctor.prod.map.fst f) (G.map $ mvfunctor.prod.map.snd f) :=
by { ext1 ‚ü® ‚ü©; ext1 ‚ü® ‚ü©; intros; refl }

end pfunctor

namespace mvqpf
variables {I I' J J' : Type u}
  (F : fam I  ‚•§ fam J ) [q  : mvqpf F]
  (G : fam I' ‚•§ fam J') [q' : mvqpf G]

attribute [extensionality fam] funext

open category_theory


namespace prod
open mvfunctor mvpfunctor
variables {F G} {Œ± Œ≤ : fam J} (f : Œ± ‚ü∂ Œ≤)

include q q'

local attribute [simp] category_theory.functor.map_comp_map category_theory.functor.map_comp_map_assoc
local attribute [-simp] functor.map_comp functor.map_comp_assoc

open mvfunctor.prod (fst snd)

instance : mvqpf (prod F G) :=
{ P         := pfunctor.prod (P F) (P G),
  abs       := Œª Œ±, pfunctor.prod_get _ _ _ ‚â´ prod_map (abs _ (fst Œ±)) (abs _ (snd Œ±)) ‚â´ prod_mk F G _,
  repr      := Œª Œ±, prod_get _ _ _ ‚â´ prod_map (repr _ _) (repr _ _) ‚â´ pfunctor.prod_mk _ _ _,
  abs_repr  := by { intros, simp, },
  abs_map   := by { intros, simp, },
 }

end prod

end mvqpf
